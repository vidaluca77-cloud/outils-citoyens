from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import json
import os
import time
import openai
from openai import OpenAI
from typing import Dict, Any, List
import logging
from jinja2 import Template
import prompting

app = FastAPI(title="Outils Citoyens API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], allow_methods=["*"], allow_headers=["*"], allow_credentials=True
)

# Include chat router
from chat import router as chat_router
app.include_router(chat_router)

# Include legal router
from legal.router import router as legal_router
app.include_router(legal_router)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Pydantic models for structured output
class Lettre(BaseModel):
    destinataire_bloc: str
    objet: str
    corps: str
    pj: List[str]
    signature: str

class Output(BaseModel):
    resume: List[str]
    lettre: Lettre
    checklist: List[str]
    mentions: str

# OpenAI setup
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai_client = None
if OPENAI_API_KEY:
    openai_client = OpenAI(api_key=OPENAI_API_KEY)

# Load system prompt and templates
def load_system_prompt():
    try:
        with open("system_lumiere.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except:
        return "SYSTEM PROMPT ‚Äì Lumi√®re citoyenne : assistant civique FR, clair, bienveillant, non avocat. Sortie JSON {resume[], lettre{}, checklist[], mentions}."

def load_templates():
    try:
        with open("templates.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {
            "amendes": "Contexte: contestation d'amende. Donn√©es: {fields}",
            "caf": "Contexte: r√©ponse √† un courrier CAF. Donn√©es: {fields}"
        }

SYSTEM_PROMPT = load_system_prompt()
TEMPLATES = load_templates()

def enhance_response_quality(response: Dict[str, Any], user_fields: dict, tool_id: str) -> Dict[str, Any]:
    """Enhance response quality with user-centric improvements"""
    import copy
    enhanced = copy.deepcopy(response)
    
    # Ensure resume is comprehensive and reassuring
    if len(enhanced.get("resume", [])) < 6:
        # Add more helpful steps if too short
        enhanced["resume"].extend([
            "Garder confiance : vous suivez la bonne proc√©dure et vos droits sont prot√©g√©s",
            "En cas de question, ne pas h√©siter √† contacter les services comp√©tents - ils sont l√† pour vous aider"
        ])
    
    # Enhance mentions to be more encouraging
    if "mentions" in enhanced:
        base_mentions = enhanced["mentions"]
        if "ü§ñ" not in base_mentions:  # If not already enhanced
            enhanced["mentions"] = f"ü§ñ {base_mentions} üí™ Vous avez des droits l√©gitimes, n'h√©sitez pas √† les faire valoir avec confiance."
    
    # Personalize signature if user data available
    if "lettre" in enhanced and user_fields:
        # Try to personalize the signature block
        signature = enhanced["lettre"].get("signature", "")
        if "[" in signature and "]" in signature:
            # Replace placeholders with more helpful text
            enhanced["lettre"]["signature"] = signature.replace(
                "[Votre pr√©nom et NOM]", "[Indiquer vos pr√©nom et nom]"
            ).replace(
                "[Votre adresse compl√®te]", "[Votre adresse compl√®te]"
            )
    
    return enhanced

def integrate_css_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into CSS mock response for personalization"""
    import copy
    
    # Deep copy to avoid modifying the original
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    revenu = user_fields.get("revenu_mensuel_net", "[Revenus mensuels]")
    foyer = user_fields.get("foyer", "[Nombre de personnes]")
    age = user_fields.get("age", "[Age]")
    statut = user_fields.get("statut", "[Statut]")
    couverture = user_fields.get("couverture_actuelle", "[Couverture actuelle]")
    
    # Calculate eligibility (simplified 2024 thresholds)
    eligibility_text = "[√âligibilit√© √† calculer]"
    css_type = "CSS sans participation"
    
    if isinstance(revenu, (int, float)) and isinstance(foyer, int):
        annual_income = float(revenu) * 12
        # Simplified thresholds for 2024 (approximate)
        thresholds = {1: 9203, 2: 13804, 3: 16565, 4: 19326, 5: 22087}
        threshold = thresholds.get(int(foyer), 22087 + (int(foyer) - 5) * 2761)
        
        if annual_income <= threshold:
            eligibility_text = f"√âLIGIBLE √† la CSS gratuite (revenus: {annual_income:.0f}‚Ç¨/an, plafond: {threshold}‚Ç¨)"
            css_type = "CSS sans participation financi√®re"
        elif annual_income <= threshold * 1.35:  # Participation bracket
            participation = round((annual_income - threshold) * 0.08 / 12)
            eligibility_text = f"√âLIGIBLE √† la CSS avec participation de {participation}‚Ç¨/mois"
            css_type = "CSS avec participation forfaitaire"
        else:
            eligibility_text = f"NON √âLIGIBLE (revenus: {annual_income:.0f}‚Ç¨/an d√©passent le plafond de {threshold}‚Ç¨)"
            css_type = "Alternative : mutuelle priv√©e ou d'entreprise"
    
    # Personalize resume
    personalized["resume"][0] = f"√âvaluer l'√©ligibilit√© CSS pour un foyer de {foyer} personne(s) avec {revenu}‚Ç¨/mois de revenus"
    personalized["resume"][2] = f"D√©poser la demande CSS aupr√®s de la CPAM avec le formulaire S3715 pour {css_type}"
    
    # Personalize letter
    lettre = personalized["lettre"]
    lettre["destinataire_bloc"] = "Caisse Primaire d'Assurance Maladie\nService Compl√©mentaire Sant√© Solidaire\n[Adresse CPAM de votre d√©partement]\n[Code postal] [Ville]"
    lettre["objet"] = f"Demande de Compl√©mentaire Sant√© Solidaire - Foyer {foyer} personne(s) - Revenus {revenu}‚Ç¨/mois"
    
    statut_text = ""
    if statut in ["chomeur", "demandeur_emploi"]:
        statut_text = " en situation de recherche d'emploi"
    elif statut == "retraite":
        statut_text = " retrait√©(e)"
    elif statut == "etudiant":
        statut_text = " √©tudiant(e)"
    
    lettre["corps"] = f"""Madame, Monsieur,

J'ai l'honneur de solliciter l'attribution de la Compl√©mentaire Sant√© Solidaire pour mon foyer compos√© de {foyer} personne(s){statut_text}, avec des revenus mensuels nets de {revenu}‚Ç¨.

Situation actuelle : {couverture if couverture != "aucune" else "aucune couverture compl√©mentaire sant√©"}.

{eligibility_text}

Veuillez trouver ci-joint l'ensemble des pi√®ces justificatives requises par la r√©glementation en vigueur.

Dans l'attente de votre r√©ponse dans un d√©lai de 2 mois, je vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations respectueuses."""
    
    # Personalize pieces jointes based on status
    pj_list = ["Formulaire S3715 d√ªment compl√©t√© et sign√©", "Justificatifs de revenus des 3 derniers mois complets"]
    
    if statut in ["chomeur", "demandeur_emploi"]:
        pj_list.append("Attestation de situation P√¥le emploi actualis√©e")
    elif statut == "retraite":
        pj_list.append("Notification de pension de retraite")
    elif statut == "etudiant":
        pj_list.append("Certificat de scolarit√© en cours de validit√©")
    
    pj_list.extend(["Justificatif de domicile de moins de 3 mois", "Copie recto-verso de la pi√®ce d'identit√©"])
    lettre["pj"] = pj_list
    
    # Personalize checklist
    if isinstance(revenu, (int, float)) and isinstance(foyer, int):
        annual = float(revenu) * 12
        personalized["checklist"][0] = f"V√©rifier l'√©ligibilit√© : {revenu}‚Ç¨ √ó 12 = {annual:.0f}‚Ç¨/an pour {foyer} personne(s)"
    
    return personalized

def integrate_loyers_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into loyers mock response for personalization"""
    import copy
    
    # Deep copy to avoid modifying the original
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    loyer = user_fields.get("loyer_actuel", "[Montant du loyer]")
    surface = user_fields.get("surface", "[Surface]")
    ville = user_fields.get("ville", "[Ville]")
    adresse = user_fields.get("adresse", "[Adresse du logement]")
    type_logement = user_fields.get("type", "logement")
    
    # Calculate potential excess (simplified estimate for demonstration)
    excess_text = "[Calcul du d√©passement]"
    if isinstance(loyer, (int, float, str)) and isinstance(surface, (int, float, str)):
        try:
            loyer_val = float(loyer)
            surface_val = float(surface)
            prix_m2 = loyer_val / surface_val
            if prix_m2 > 25:  # Simplified threshold for Paris
                excess = loyer_val - (25 * surface_val)
                excess_text = f"D√©passement estim√© de {excess:.0f}‚Ç¨/mois ({prix_m2:.2f}‚Ç¨/m¬≤ vs r√©f√©rence ~25‚Ç¨/m¬≤)"
        except:
            pass
    
    # Personalize resume
    personalized["resume"][0] = f"V√©rifier l'encadrement des loyers applicable √† {ville} pour un {type_logement} de {surface}m¬≤"
    personalized["resume"][1] = f"Calculer le d√©passement du loyer de r√©f√©rence pour le logement sis {adresse} (loyer actuel: {loyer}‚Ç¨)"
    
    # Personalize letter
    lettre = personalized["lettre"]
    lettre["objet"] = f"Contestation du montant du loyer - Logement sis {adresse}, {ville}"
    
    lettre["corps"] = f"""Monsieur/Madame le Bailleur,

J'ai l'honneur de porter √† votre connaissance ma contestation formelle concernant le montant du loyer pratiqu√© pour le logement que j'occupe sis {adresse}, {ville}.

Apr√®s v√©rification aupr√®s des services comp√©tents, il appara√Æt que le loyer mensuel de {loyer}‚Ç¨ pour un {type_logement} de {surface}m¬≤ d√©passe manifestement les plafonds l√©gaux en vigueur dans cette zone.

{excess_text}

Conform√©ment aux dispositions de la loi ELAN et du d√©cret d'application relatif √† l'encadrement des loyers, je vous demande de bien vouloir proc√©der √† la r√©gularisation de cette situation en ramenant le loyer au montant l√©galement autoris√©.

Je vous prie d'agr√©er, Monsieur/Madame le Bailleur, l'expression de ma consid√©ration distingu√©e."""
    
    # Update pieces jointes
    lettre["pj"] = [
        f"Bail de location du logement sis {adresse}",
        "Quittances de loyer des 12 derniers mois",
        f"Donn√©es de r√©f√©rence des loyers √† {ville}",
        "Justificatif d'identit√© en cours de validit√©"
    ]
    
    # Personalize checklist
    personalized["checklist"][0] = f"Consulter les loyers de r√©f√©rence en mairie de {ville} ou sur le site officiel"
    personalized["checklist"][1] = f"Calculer pr√©cis√©ment le d√©passement pour un {type_logement} de {surface}m¬≤ √† {loyer}‚Ç¨/mois"
    
    return personalized

def integrate_amendes_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into amendes mock response for personalization"""
    import copy
    from datetime import datetime, timedelta
    
    # Deep copy to avoid modifying the original
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    numero = user_fields.get("numero_amende", "[Num√©ro PV]")
    motif = user_fields.get("motif", "[Motif de la contravention]")
    lieu = user_fields.get("lieu", "[Lieu de l'infraction]")
    date_pv = user_fields.get("date", "[Date]")
    heure = user_fields.get("heure", "[Heure]")
    
    # Calculate 45-day deadline if date is provided
    deadline_text = "[45 jours apr√®s r√©ception]"
    if date_pv and "/" in str(date_pv):
        try:
            # Assume format DD/MM/YYYY and calculate 45 days later
            day, month, year = map(int, str(date_pv).split("/"))
            pv_date = datetime(year, month, day)
            deadline = pv_date + timedelta(days=45)
            deadline_text = deadline.strftime("%d/%m/%Y")
        except:
            pass  # Keep fallback if parsing fails
    
    # Personalize resume
    if "num√©ro" in str(personalized["resume"][0]).lower():
        personalized["resume"][0] = f"Analyser minutieusement les mentions du proc√®s-verbal n¬∞ {numero} dans un d√©lai de 5 jours"
    
    if len(personalized["resume"]) > 3:
        personalized["resume"][3] = f"Exp√©dier le courrier en LRAR avant l'√©ch√©ance du {deadline_text} (45e jour apr√®s r√©ception)"
    
    # Personalize letter
    lettre = personalized["lettre"]
    
    # Update object with specific data
    lettre["objet"] = f"Contestation formelle du proc√®s-verbal n¬∞ {numero} - {motif.title()} du {date_pv} - Art. L121-3 du Code de la route"
    
    # Update letter body with personalized data
    lettre["corps"] = f"""Monsieur l'Officier du Minist√®re Public,

J'ai l'honneur de porter √† votre connaissance ma contestation formelle du proc√®s-verbal n¬∞ {numero} dress√© le {date_pv} √† {heure} pour {motif} sur la voie publique sise {lieu}.

Apr√®s examen attentif des circonstances de fait et de droit, je conteste cette verbalisation pour les motifs juridiques suivants :

[Expos√© d√©taill√© et argument√© des moyens de contestation selon les preuves disponibles]

En cons√©quence, et conform√©ment aux dispositions de l'article 530 du Code de proc√©dure p√©nale, je sollicite respectueusement l'annulation pure et simple de cette contravention.

Dans l'attente de votre d√©cision motiv√©e, je vous prie d'agr√©er, Monsieur l'Officier du Minist√®re Public, l'expression de ma haute consid√©ration."""
    
    # Update pieces jointes with specific PV number
    lettre["pj"][0] = f"Copie int√©grale du proc√®s-verbal n¬∞ {numero}"
    if lieu != "[Lieu de l'infraction]":
        lettre["pj"][1] = f"Photographies horodat√©es du lieu {lieu}"
    
    # Personalize checklist
    if deadline_text != "[45 jours apr√®s r√©ception]":
        personalized["checklist"][0] = f"Respecter imp√©rativement le d√©lai l√©gal de 45 jours (√©ch√©ance : {deadline_text})"
    
    if lieu != "[Lieu de l'infraction]":
        personalized["checklist"][1] = f"Photographier le lieu {lieu} avec horodatage pour constitution de preuves"
    
    if numero != "[Num√©ro PV]":
        personalized["checklist"][3] = f"V√©rifier l'exactitude des mentions du PV n¬∞ {numero} (heure, lieu, motif)"
    
    return personalized

def integrate_travail_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into travail mock response for personalization"""
    import copy
    
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    type_litige = user_fields.get("type_litige", "conflit professionnel")
    employeur = user_fields.get("employeur", "[Nom de l'employeur]")
    periode = user_fields.get("periode", "[P√©riode concern√©e]")
    montant_estime = user_fields.get("montant_estime", "[Montant estim√©]")
    date_licenciement = user_fields.get("date_licenciement", "[Date]")
    
    # Personalize resume based on litigation type
    if "heures" in str(type_litige).lower():
        personalized["resume"][0] = f"Rassembler les preuves des heures suppl√©mentaires non pay√©es chez {employeur} pour la p√©riode {periode}"
        personalized["resume"][1] = f"Calculer le montant exact des sommes dues (estimation : {montant_estime}‚Ç¨) selon les taux l√©gaux"
    elif "licenciement" in str(type_litige).lower():
        personalized["resume"][0] = f"Analyser la proc√©dure de licenciement effectu√©e par {employeur} le {date_licenciement}"
        personalized["resume"][1] = f"Identifier les irr√©gularit√©s et violations du Code du travail dans cette proc√©dure"
    else:
        personalized["resume"][0] = f"Analyser votre situation de {type_litige} avec l'employeur {employeur}"
        personalized["resume"][1] = f"Rassembler tous les √©l√©ments de preuve relatifs √† la p√©riode {periode}"
    
    # Personalize letter
    lettre = personalized["lettre"]
    lettre["destinataire_bloc"] = f"{employeur}\nService Ressources Humaines\n[Adresse de l'entreprise]\n[Code postal et ville]"
    
    if "heures" in str(type_litige).lower():
        lettre["objet"] = f"Demande de paiement - Heures suppl√©mentaires p√©riode {periode} - Montant estim√© {montant_estime}‚Ç¨"
    elif "licenciement" in str(type_litige).lower():
        lettre["objet"] = f"Contestation de la proc√©dure de licenciement du {date_licenciement} - Demande de r√©gularisation"
    else:
        lettre["objet"] = f"R√©clamation {type_litige.title()} - P√©riode {periode}"
    
    # Customize letter body based on litigation type
    if "heures" in str(type_litige).lower():
        lettre["corps"] = f"""Monsieur le Directeur des Ressources Humaines,

J'ai l'honneur de porter √† votre connaissance que des heures suppl√©mentaires effectu√©es au sein de votre entreprise {employeur} n'ont pas √©t√© r√©mun√©r√©es conform√©ment aux dispositions du Code du travail.

Pour la p√©riode allant de {periode}, j'ai effectu√© des heures suppl√©mentaires qui n'ont pas fait l'objet d'une r√©mun√©ration selon les taux major√©s l√©galement pr√©vus. Le montant total des sommes dues s'√©l√®ve approximativement √† {montant_estime}‚Ç¨.

Conform√©ment aux articles L3121-33 et suivants du Code du travail, je vous demande de proc√©der au r√®glement de ces heures suppl√©mentaires sous un d√©lai de 30 jours.

Je vous prie d'agr√©er, Monsieur le Directeur, l'expression de ma consid√©ration distingu√©e."""
    elif "licenciement" in str(type_litige).lower():
        lettre["corps"] = f"""Monsieur le Directeur des Ressources Humaines,

Par la pr√©sente, je conteste formellement la proc√©dure de licenciement qui m'a √©t√© notifi√©e le {date_licenciement} par votre entreprise {employeur}.

Cette proc√©dure pr√©sente des irr√©gularit√©s au regard des dispositions du Code du travail, notamment en mati√®re de forme et de d√©lais. Ces violations constituent un motif de nullit√© de la proc√©dure.

Je vous demande de bien vouloir proc√©der √† ma r√©int√©gration et √† la r√©gularisation de ma situation sous 15 jours.

Je vous prie d'agr√©er, Monsieur le Directeur, l'expression de ma consid√©ration distingu√©e."""
    else:
        lettre["corps"] = f"""Monsieur le Directeur,

Je vous informe d'un {type_litige} survenu dans le cadre de mon activit√© professionnelle au sein de votre entreprise {employeur}.

Pour la p√©riode {periode}, ma situation n√©cessite une intervention de votre part pour une r√©solution conforme au droit du travail et aux conventions collectives applicables.

Je sollicite un entretien dans les meilleurs d√©lais pour examiner cette situation et trouver une solution satisfaisante.

Je vous prie d'agr√©er, Monsieur le Directeur, l'expression de ma consid√©ration distingu√©e."""
    
    # Customize pieces jointes
    if "heures" in str(type_litige).lower():
        lettre["pj"] = [f"Planning de travail d√©taill√© pour la p√©riode {periode}", "Relev√©s d'heures suppl√©mentaires", "Contrat de travail", "Convention collective applicable", "Calcul d√©taill√© des sommes dues"]
    elif "licenciement" in str(type_litige).lower():
        lettre["pj"] = [f"Lettre de licenciement du {date_licenciement}", "Contrat de travail", "Derniers bulletins de paie", "√âl√©ments prouvant l'irr√©gularit√© de la proc√©dure"]
    else:
        lettre["pj"] = ["Documents relatifs au litige", "Contrat de travail", "Convention collective", "Toute correspondance pertinente"]
    
    # Personalize checklist
    if "heures" in str(type_litige).lower():
        personalized["checklist"][0] = f"Rassembler tous les justificatifs d'heures pour la p√©riode {periode} chez {employeur}"
        personalized["checklist"][1] = f"Calculer pr√©cis√©ment les {montant_estime}‚Ç¨ selon les taux major√©s (25% ou 50%)"
    elif "licenciement" in str(type_litige).lower():
        personalized["checklist"][0] = f"Analyser la lettre de licenciement du {date_licenciement} pour identifier les vices de proc√©dure"
        personalized["checklist"][1] = f"V√©rifier le respect des d√©lais et formes de la proc√©dure par {employeur}"
    
    return personalized

def integrate_caf_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into CAF mock response for personalization"""
    import copy
    
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    numero_allocataire = user_fields.get("numero_allocataire", "[Num√©ro allocataire]")
    type_courrier = user_fields.get("type_courrier", "r√©clamation")
    montant = user_fields.get("montant", "[Montant]")
    periode = user_fields.get("periode", "[P√©riode]")
    motif = user_fields.get("motif", "[Motif du litige]")
    
    # Personalize resume
    personalized["resume"][0] = f"Analyser le courrier CAF concernant votre dossier allocataire n¬∞ {numero_allocataire}"
    personalized["resume"][1] = f"Contester la d√©cision relative au {type_courrier} de {montant}‚Ç¨ pour la p√©riode {periode}"
    
    # Personalize letter
    lettre = personalized["lettre"]
    lettre["destinataire_bloc"] = "Caisse d'Allocations Familiales\nService Contentieux et Recours\n[Adresse CAF de votre d√©partement]\n[Code postal] [Ville]"
    
    if "indu" in str(type_courrier).lower():
        lettre["objet"] = f"Recours gracieux - Ind√ª n¬∞ allocataire {numero_allocataire} - Montant {montant}‚Ç¨ - P√©riode {periode}"
    elif "suspension" in str(type_courrier).lower():
        lettre["objet"] = f"Contestation suspension allocations - N¬∞ {numero_allocataire} - P√©riode {periode}"
    else:
        lettre["objet"] = f"Recours gracieux - {type_courrier.title()} - N¬∞ allocataire {numero_allocataire}"
    
    # Customize letter body
    lettre["corps"] = f"""Madame, Monsieur,

Allocataire sous le num√©ro {numero_allocataire}, je vous adresse la pr√©sente afin de contester formellement votre d√©cision concernant un {type_courrier} d'un montant de {montant}‚Ç¨ pour la p√©riode {periode}.

Apr√®s examen attentif de votre courrier, je conteste cette d√©cision pour les motifs suivants :

[Expos√© d√©taill√© de votre situation et des arguments juridiques]

Cette d√©cision me semble erron√©e au regard de ma situation r√©elle et des droits qui me sont reconnus par le Code de la s√©curit√© sociale.

Conform√©ment √† l'article R142-1 du Code de la s√©curit√© sociale, je sollicite un recours gracieux et vous demande de bien vouloir r√©examiner mon dossier.

Dans l'attente de votre r√©ponse dans un d√©lai de 2 mois, je vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations respectueuses."""
    
    # Customize pieces jointes
    lettre["pj"] = [f"Courrier CAF contest√© concernant le {type_courrier}", f"Justificatifs de situation pour la p√©riode {periode}", "Relev√©s de compte bancaire", "Tout document prouvant la r√©gularit√© de ma situation", "Copie pi√®ce d'identit√©"]
    
    # Personalize checklist
    personalized["checklist"][0] = f"Respecter le d√©lai de recours de 2 mois apr√®s r√©ception du courrier CAF"
    personalized["checklist"][1] = f"Rassembler tous justificatifs prouvant l'erreur de la CAF sur le {type_courrier} de {montant}‚Ç¨"
    personalized["checklist"][2] = f"Envoyer le recours en LRAR √† la CAF avec num√©ro allocataire {numero_allocataire}"
    
    return personalized

def integrate_energie_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into energie mock response for personalization"""
    import copy
    
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    fournisseur = user_fields.get("fournisseur", "[Fournisseur d'√©nergie]")
    facture_numero = user_fields.get("facture_numero", "[Num√©ro de facture]")
    montant_conteste = user_fields.get("montant_conteste", "[Montant contest√©]")
    periode = user_fields.get("periode", "[P√©riode de facturation]")
    motif_contestation = user_fields.get("motif_contestation", "facture anormalement √©lev√©e")
    
    # Personalize resume
    personalized["resume"][0] = f"Analyser la facture {fournisseur} n¬∞ {facture_numero} d'un montant de {montant_conteste}‚Ç¨"
    personalized["resume"][1] = f"Identifier les √©l√©ments anormaux ou erron√©s dans cette facturation {fournisseur}"
    personalized["resume"][2] = f"Contester formellement aupr√®s de {fournisseur} le montant de {montant_conteste}‚Ç¨"
    
    # Personalize letter
    lettre = personalized["lettre"]
    lettre["destinataire_bloc"] = f"{fournisseur}\nService Client√®le - R√©clamations\n[Adresse du fournisseur]\n[Code postal] [Ville]"
    lettre["objet"] = f"Contestation facture n¬∞ {facture_numero} - Montant {montant_conteste}‚Ç¨ - {motif_contestation}"
    
    lettre["corps"] = f"""Madame, Monsieur,

Client de votre soci√©t√© {fournisseur}, je vous adresse la pr√©sente pour contester formellement la facture n¬∞ {facture_numero} d'un montant de {montant_conteste}‚Ç¨ pour la p√©riode {periode}.

Cette facturation me semble erron√©e pour les motifs suivants : {motif_contestation}.

Apr√®s v√©rification de mes relev√©s de consommation et comparaison avec les p√©riodes pr√©c√©dentes, je constate une anomalie manifeste qui n√©cessite une r√©vision de cette facture.

Conform√©ment au Code de l'√©nergie et aux conditions g√©n√©rales de vente, je vous demande de proc√©der √† une v√©rification de votre comptage et √† une rectification de cette facture.

Je vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration distingu√©e."""
    
    # Customize pieces jointes
    lettre["pj"] = [f"Copie de la facture contest√©e n¬∞ {facture_numero}", "Relev√©s de consommation ant√©rieurs pour comparaison", "Photos des index de compteurs", f"Historique des factures {fournisseur}", "Justificatif d'identit√©"]
    
    # Personalize checklist
    personalized["checklist"][0] = f"Conserver la facture originale {fournisseur} n¬∞ {facture_numero} et tous les documents"
    personalized["checklist"][1] = f"Relever les index de compteurs et photographier pour preuve"
    personalized["checklist"][2] = f"Envoyer la contestation en LRAR √† {fournisseur} dans les 2 mois"
    
    return personalized

def integrate_aides_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into aides mock response for personalization"""
    import copy
    
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    situation = user_fields.get("situation", "[Situation]")
    revenus = user_fields.get("revenus", "[Revenus]")
    foyer = user_fields.get("foyer", "[Composition foyer]")
    ville = user_fields.get("ville", "[Ville]")
    aide_demandee = user_fields.get("aide_demandee", "RSA")
    
    # Personalize resume
    personalized["resume"][0] = f"Analyser votre √©ligibilit√© aux aides avec {revenus}‚Ç¨ de revenus pour {foyer} personne(s) en situation de {situation}"
    personalized["resume"][1] = f"Identifier les aides disponibles √† {ville} selon votre profil"
    personalized["resume"][2] = f"Constituer un dossier de demande d'{aide_demandee} adapt√© √† votre situation"
    
    # Personalize letter
    lettre = personalized["lettre"]
    
    if aide_demandee.upper() == "RSA":
        lettre["destinataire_bloc"] = f"Conseil D√©partemental de {ville}\nService RSA\n[Adresse du Conseil D√©partemental]\n[Code postal] [Ville]"
        lettre["objet"] = f"Demande de RSA - Foyer {foyer} personne(s) - Revenus {revenus}‚Ç¨ - Situation {situation}"
    else:
        lettre["destinataire_bloc"] = f"Service des Aides Sociales\nMairie de {ville}\n[Adresse de la mairie]\n[Code postal] [Ville]"
        lettre["objet"] = f"Demande d'aide sociale - {aide_demandee} - Foyer {foyer} personne(s)"
    
    lettre["corps"] = f"""Madame, Monsieur,

Je sollicite par la pr√©sente l'attribution de l'aide {aide_demandee} pour mon foyer compos√© de {foyer} personne(s).

Ma situation actuelle : {situation}, avec des revenus mensuels de {revenus}‚Ç¨, me place dans une situation de pr√©carit√© qui justifie cette demande d'aide.

R√©sidant √† {ville}, je souhaite b√©n√©ficier des dispositifs d'aide sociale auxquels ma situation me donne droit selon la r√©glementation en vigueur.

Vous trouverez ci-joint l'ensemble des pi√®ces justificatives n√©cessaires √† l'examen de ma demande.

Dans l'attente de votre r√©ponse, je vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations respectueuses."""
    
    # Customize pieces jointes based on aid type
    base_pj = ["Justificatifs de revenus des 3 derniers mois", "Justificatif de domicile r√©cent", "Pi√®ce d'identit√© en cours de validit√©", f"Justificatifs de situation ({situation})"]
    
    if aide_demandee.upper() == "RSA":
        lettre["pj"] = base_pj + ["Attestation P√¥le emploi (si applicable)", "RIB", "Formulaire de demande RSA compl√©t√©"]
    else:
        lettre["pj"] = base_pj + ["Devis ou factures selon l'aide demand√©e", "Attestation de situation familiale"]
    
    # Personalize checklist
    personalized["checklist"][0] = f"V√©rifier l'√©ligibilit√© √† l'{aide_demandee} avec {revenus}‚Ç¨ pour {foyer} personne(s)"
    personalized["checklist"][1] = f"Se renseigner sur les aides sp√©cifiques disponibles √† {ville}"
    personalized["checklist"][2] = f"D√©poser le dossier complet au service comp√©tent de {ville}"
    
    return personalized

def integrate_sante_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into sante mock response for personalization"""
    import copy
    
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    type_demande = user_fields.get("type_demande", "acc√®s aux soins")
    ville = user_fields.get("ville", "[Ville]")
    urgence = user_fields.get("urgence", "non")
    probleme = user_fields.get("probleme", "difficult√© d'acc√®s aux soins")
    medecin_souhaite = user_fields.get("medecin_souhaite", "g√©n√©raliste")
    
    # Personalize resume
    if "urgence" in str(urgence).lower() or urgence == "oui":
        personalized["resume"][0] = f"URGENT - Contacter imm√©diatement le 15 (SAMU) ou vous rendre aux urgences de {ville}"
        personalized["resume"][1] = f"Si non urgent, rechercher un m√©decin {medecin_souhaite} disponible rapidement √† {ville}"
    else:
        personalized["resume"][0] = f"Rechercher un m√©decin {medecin_souhaite} disponible √† {ville} dans les 6 jours (d√©lai l√©gal)"
        personalized["resume"][1] = f"Utiliser les plateformes de t√©l√©consultation si pas de m√©decin disponible √† {ville}"
    
    # Personalize letter
    lettre = personalized["lettre"]
    
    if "medecin_traitant" in str(type_demande).lower():
        lettre["destinataire_bloc"] = f"Ordre des M√©decins de {ville}\n[Adresse d√©partementale]\n[Code postal] {ville}"
        lettre["objet"] = f"Demande d'aide pour trouver un m√©decin traitant - R√©sidence {ville}"
    else:
        lettre["destinataire_bloc"] = f"Centre de soins de {ville}\n[Adresse du centre]\n[Code postal] {ville}"
        lettre["objet"] = f"Demande de {type_demande} - {probleme} - R√©sidence {ville}"
    
    lettre["corps"] = f"""Madame, Monsieur,

R√©sidant √† {ville}, je rencontre des difficult√©s pour {type_demande} : {probleme}.

{"Cette situation rev√™t un caract√®re urgent n√©cessitant une prise en charge rapide." if urgence == "oui" else "Je sollicite votre aide pour acc√©der aux soins dans les d√©lais l√©gaux de 6 jours."}

Je recherche un m√©decin {medecin_souhaite} disponible pour assurer un suivi m√©dical r√©gulier et de qualit√© selon mes besoins de sant√©.

Pourriez-vous m'orienter vers les professionnels de sant√© disponibles √† {ville} ou les dispositifs d'aide existants ?

Je vous remercie de votre aide et vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration distingu√©e."""
    
    # Customize pieces jointes
    lettre["pj"] = [f"Justificatif de domicile √† {ville}", "Carte Vitale ou attestation S√©curit√© Sociale", "Ordonnances m√©dicales r√©centes (si applicable)", "Courriers m√©dicaux ant√©rieurs (si pertinents)"]
    
    # Personalize checklist
    personalized["checklist"][0] = f"Contacter votre CPAM ou le 3646 pour obtenir la liste des m√©decins √† {ville}"
    personalized["checklist"][1] = f"Consulter doctolib.fr ou autres plateformes pour {ville}"
    if urgence == "oui":
        personalized["checklist"][2] = f"En cas d'urgence : 15 (SAMU), 112 (urgences europ√©ennes) ou urgences de {ville}"
    
    return personalized

def integrate_usure_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into usure mock response for personalization"""
    import copy
    
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    banque = user_fields.get("banque", "[Nom de la banque]")
    taux_pratique = user_fields.get("taux_pratique", "[Taux pratiqu√©]")
    montant_pret = user_fields.get("montant_pret", "[Montant du pr√™t]")
    type_credit = user_fields.get("type_credit", "cr√©dit √† la consommation")
    date_signature = user_fields.get("date_signature", "[Date de signature]")
    
    # Calculate potential usury
    taux_usure_legal = "21%" # Simplified for demonstration
    depassement = "Oui" if isinstance(taux_pratique, (int, float, str)) and str(taux_pratique).replace("%", "").replace(",", ".").replace(" ", "").isdigit() and float(str(taux_pratique).replace("%", "").replace(",", ".")) > 21 else "√Ä v√©rifier"
    
    # Personalize resume
    personalized["resume"][0] = f"V√©rifier si le taux de {taux_pratique}% pratiqu√© par {banque} d√©passe le seuil d'usure l√©gal"
    personalized["resume"][1] = f"Calculer le TEG r√©el du {type_credit} de {montant_pret}‚Ç¨ sign√© le {date_signature}"
    personalized["resume"][2] = f"Contester aupr√®s de {banque} le d√©passement du taux d'usure ({depassement})"
    
    # Personalize letter
    lettre = personalized["lettre"]
    lettre["destinataire_bloc"] = f"{banque}\nService Juridique - Contentieux\n[Adresse de l'agence ou si√®ge]\n[Code postal] [Ville]"
    lettre["objet"] = f"Contestation taux d'usure - {type_credit.title()} du {date_signature} - TEG {taux_pratique}%"
    
    lettre["corps"] = f"""Madame, Monsieur,

Par la pr√©sente, je conteste formellement le taux d'int√©r√™t appliqu√© au {type_credit} que j'ai souscrit aupr√®s de votre √©tablissement {banque} le {date_signature} pour un montant de {montant_pret}‚Ç¨.

Le taux effectif global (TEG) de {taux_pratique}% appliqu√© √† ce cr√©dit d√©passe manifestement le taux d'usure l√©gal fix√© par la Banque de France (actuellement {taux_usure_legal} pour ce type de cr√©dit).

Cette situation constitue une infraction √† l'article L314-6 du Code de la consommation et rend le contrat de cr√©dit partiellement nul.

Je vous demande de proc√©der imm√©diatement √† la rectification de ce taux et au remboursement des int√©r√™ts ind√ªment per√ßus.

Dans l'attente de votre r√©ponse sous 30 jours, je vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration distingu√©e."""
    
    # Customize pieces jointes
    lettre["pj"] = [f"Contrat de cr√©dit {banque} du {date_signature}", f"Tableaux d'amortissement montrant le TEG de {taux_pratique}%", "Taux d'usure Banque de France en vigueur", "Calcul d√©taill√© du d√©passement", "Justificatif d'identit√©"]
    
    # Personalize checklist
    personalized["checklist"][0] = f"Consulter les taux d'usure officiels sur banque-france.fr pour votre type de cr√©dit"
    personalized["checklist"][1] = f"Calculer pr√©cis√©ment le TEG de votre {type_credit} chez {banque}"
    personalized["checklist"][2] = f"Conserver tous les documents du cr√©dit {banque} de {montant_pret}‚Ç¨"
    
    return personalized

def integrate_expulsions_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into expulsions mock response for personalization"""
    import copy
    from datetime import datetime, timedelta
    
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    type_expulsion = user_fields.get("type", "locatif")
    date_assignation = user_fields.get("date_assignation", "[Date d'assignation]")
    bailleur = user_fields.get("bailleur", "[Nom du bailleur]")
    motif = user_fields.get("motif", "loyers impay√©s")
    montant_dette = user_fields.get("montant_dette", "[Montant de la dette]")
    
    # Check if we're in winter truce period
    today = datetime.now()
    winter_start = datetime(today.year, 11, 1)  # November 1
    winter_end = datetime(today.year + 1, 3, 31)  # March 31 next year
    if today.month < 4:  # January to March
        winter_end = datetime(today.year, 3, 31)
    in_winter_truce = winter_start <= today <= winter_end
    
    # Personalize resume
    personalized["resume"][0] = f"{'PROTECTION : Vous √™tes en tr√™ve hivernale jusqu\'au 31 mars - l\'expulsion est suspendue' if in_winter_truce else 'Analyser l\'assignation du ' + str(date_assignation) + ' pour ' + str(motif)}"
    personalized["resume"][1] = f"Pr√©parer votre d√©fense contre {bailleur} pour une dette de {montant_dette}‚Ç¨"
    personalized["resume"][2] = f"Saisir le Fonds de Solidarit√© Logement (FSL) et la commission de m√©diation"
    
    # Personalize letter
    lettre = personalized["lettre"]
    
    if "coupure" in str(type_expulsion).lower():
        lettre["destinataire_bloc"] = f"[Fournisseur d'√©nergie]\nService Recouvrement\n[Adresse du fournisseur]\n[Code postal] [Ville]"
        lettre["objet"] = f"Opposition √† coupure ill√©gale - {'P√©riode de tr√™ve hivernale' if in_winter_truce else 'Demande de d√©lais'}"
    else:
        lettre["destinataire_bloc"] = f"{bailleur}\n[Qualit√© du bailleur]\n[Adresse du bailleur]\n[Code postal] [Ville]"
        lettre["objet"] = f"Demande de d√©lais de paiement - {motif} - Assignation du {date_assignation}"
    
    lettre["corps"] = f"""Madame, Monsieur,

Suite √† {"l'assignation en expulsion" if "assignation" in str(date_assignation) else "votre courrier"} du {date_assignation} concernant {motif} d'un montant de {montant_dette}‚Ç¨, je vous adresse la pr√©sente.

{"Je vous rappelle que nous sommes en p√©riode de tr√™ve hivernale du 1er novembre au 31 mars, p√©riode durant laquelle toute expulsion locative est interdite sauf exceptions tr√®s limit√©es." if in_winter_truce else "Ma situation financi√®re actuelle ne me permet pas de r√©gler imm√©diatement cette dette."}

Je sollicite par la pr√©sente un √©ch√©ancier de paiement qui me permettrait de r√©gulariser ma situation progressivement tout en conservant mon logement.

Je suis √©galement en d√©marche aupr√®s du Fonds de Solidarit√© Logement (FSL) pour obtenir une aide financi√®re.

Je vous remercie de votre compr√©hension et vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration distingu√©e."""
    
    # Customize pieces jointes
    lettre["pj"] = [f"Copie de l'assignation du {date_assignation}", "Justificatifs de revenus actuels", "Demande d'aide FSL en cours", "Proposition d'√©ch√©ancier de paiement", "Justificatif de domicile"]
    
    # Personalize checklist
    if in_winter_truce:
        personalized["checklist"][0] = f"PROTECTION ACTIVE : Tr√™ve hivernale jusqu'au 31 mars - expulsion interdite"
    personalized["checklist"][1] = f"D√©poser rapidement une demande FSL dans votre d√©partement"
    personalized["checklist"][2] = f"Pr√©parer votre d√©fense pour l'audience concernant la dette de {montant_dette}‚Ç¨"
    
    return personalized

def integrate_ecole_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into ecole mock response for personalization"""
    import copy
    
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    etablissement = user_fields.get("etablissement", "[Nom de l'√©tablissement]")
    type_harcelement = user_fields.get("type_harcelement", "harc√®lement scolaire")
    enfant_nom = user_fields.get("enfant_nom", "[Pr√©nom de l'enfant]")
    classe = user_fields.get("classe", "[Classe]")
    gravite = user_fields.get("gravite", "mod√©r√©e")
    
    # Personalize resume
    personalized["resume"][0] = f"URGENT - Signaler imm√©diatement le {type_harcelement} contre {enfant_nom} au chef d'√©tablissement {etablissement}"
    personalized["resume"][1] = f"Contacter le 3020 (num√©ro national anti-harc√®lement) pour accompagnement sp√©cialis√©"
    personalized["resume"][2] = f"Constituer un dossier de preuves du {type_harcelement} en classe de {classe}"
    
    # Personalize letter
    lettre = personalized["lettre"]
    lettre["destinataire_bloc"] = f"Monsieur/Madame le Chef d'√âtablissement\n{etablissement}\n[Adresse de l'√©tablissement]\n[Code postal] [Ville]"
    lettre["objet"] = f"SIGNALEMENT URGENT - {type_harcelement.title()} - √âl√®ve {enfant_nom} - Classe {classe}"
    
    lettre["corps"] = f"""Monsieur/Madame le Chef d'√âtablissement,

Je porte √† votre connaissance avec la plus grande urgence que mon enfant {enfant_nom}, √©l√®ve en classe de {classe} dans votre √©tablissement {etablissement}, est victime de {type_harcelement}.

Les faits se caract√©risent par {"des violences physiques r√©p√©t√©es n√©cessitant une intervention imm√©diate" if "physique" in str(type_harcelement).lower() else "des actes r√©p√©t√©s de nature √† porter atteinte √† sa dignit√© et √† son bien-√™tre scolaire"}.

Cette situation, d'une gravit√© {"majeure" if gravite == "grave" else gravite}, n√©cessite la mise en ≈ìuvre imm√©diate du protocole de prise en charge du harc√®lement scolaire pr√©vu par l'√âducation Nationale.

Je sollicite un rendez-vous en urgence pour mettre en place les mesures de protection et d'accompagnement n√©cessaires.

Dans l'attente de votre r√©action rapide, je vous prie d'agr√©er, Monsieur/Madame le Chef d'√âtablissement, l'expression de ma consid√©ration."""
    
    # Customize pieces jointes
    lettre["pj"] = [f"T√©moignages et preuves du {type_harcelement} contre {enfant_nom}", "Certificats m√©dicaux ou psychologiques (si applicable)", f"Correspondances ant√©rieures avec {etablissement}", "Photos ou captures d'√©cran (si disponibles)"]
    
    # Personalize checklist
    personalized["checklist"][0] = f"Contacter imm√©diatement le 3020 pour signaler le {type_harcelement} contre {enfant_nom}"
    personalized["checklist"][1] = f"Demander un rendez-vous urgent avec la direction de {etablissement}"
    personalized["checklist"][2] = f"Documenter tous les faits de {type_harcelement} avec dates et t√©moins"
    if gravite == "grave":
        personalized["checklist"][3] = f"Porter plainte au commissariat si violences physiques av√©r√©es"
    
    return personalized

def integrate_decodeur_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into decodeur mock response for personalization"""
    import copy
    
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    expediteur = user_fields.get("expediteur", "[Exp√©diteur]")
    objet_courrier = user_fields.get("objet_courrier", "[Objet du courrier]")
    date_courrier = user_fields.get("date_courrier", "[Date du courrier]")
    contenu = user_fields.get("contenu", "[Contenu principal]")
    delai_mentionne = user_fields.get("delai_mentionne", "[D√©lai]")
    
    # Personalize resume
    personalized["resume"][0] = f"Analyser en d√©tail le courrier de {expediteur} du {date_courrier} concernant : {objet_courrier}"
    personalized["resume"][1] = f"Identifier vos obligations et droits suite √† ce courrier de {expediteur}"
    personalized["resume"][2] = f"Respecter le d√©lai de {delai_mentionne} pour votre r√©ponse (si applicable)"
    
    # Personalize letter
    lettre = personalized["lettre"]
    lettre["destinataire_bloc"] = f"{expediteur}\n[Service exp√©diteur]\n[Adresse de l'organisme]\n[Code postal] [Ville]"
    lettre["objet"] = f"R√©ponse √† votre courrier du {date_courrier} - {objet_courrier}"
    
    lettre["corps"] = f"""Madame, Monsieur,

J'ai bien re√ßu votre courrier du {date_courrier} concernant {objet_courrier}.

Apr√®s examen attentif de votre demande, je vous apporte les √©l√©ments de r√©ponse suivants :

[Votre r√©ponse d√©taill√©e selon le contenu du courrier re√ßu]

{"Je respecte le d√©lai de " + str(delai_mentionne) + " que vous avez fix√© pour cette r√©ponse." if delai_mentionne != "[D√©lai]" else "Je vous r√©ponds dans les meilleurs d√©lais comme demand√©."}

Je me tiens √† votre disposition pour tout compl√©ment d'information n√©cessaire.

Je vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration distingu√©e."""
    
    # Customize pieces jointes
    lettre["pj"] = [f"Copie du courrier {expediteur} du {date_courrier}", "Documents justificatifs demand√©s", "Pi√®ce d'identit√© (si requise)", "Tout document pertinent selon la demande"]
    
    # Personalize checklist
    personalized["checklist"][0] = f"Conserver l'original du courrier {expediteur} et en faire des copies"
    personalized["checklist"][1] = f"Respecter imp√©rativement le d√©lai de {delai_mentionne} mentionn√©"
    personalized["checklist"][2] = f"Rassembler tous les documents demand√©s par {expediteur}"
    
    return personalized

def get_mock_response(tool_id: str, user_fields: dict = None) -> Dict[str, Any]:
    """Enhanced fallback mock response with user data integration when OpenAI is unavailable"""
    
    # Tool-specific mock responses that follow the new standards
    mock_responses = {
        "amendes": {
            "resume": [
                "Analyser minutieusement les mentions du proc√®s-verbal dans un d√©lai de 5 jours (art. L121-3 Code de la route)",
                "Rassembler m√©thodiquement les preuves mat√©rielles et testimoniales de l'erreur de verbalisation",
                "R√©diger une contestation juridiquement argument√©e selon les dispositions du Code de proc√©dure p√©nale",
                "Exp√©dier le courrier en lettre recommand√©e avec accus√© de r√©ception avant l'expiration du d√©lai de 45 jours",
                "Constituer un dossier de suivi avec copies int√©grales et accus√©s de r√©ception pour tra√ßabilit√©",
                "Surveiller activement la r√©ponse de l'Officier du Minist√®re Public dans un d√©lai maximal de 3 mois",
                "Pr√©parer les √©ventuels recours compl√©mentaires en cas de rejet non motiv√© de la contestation"
            ],
            "lettre": {
                "destinataire_bloc": "Monsieur l'Officier du Minist√®re Public\nTribunal de Police de [Ville]\nService des Contraventions\n[Code postal] [Ville]",
                "objet": "Contestation formelle du proc√®s-verbal n¬∞ [Num√©ro] - Art. L121-3 du Code de la route",
                "corps": "Monsieur l'Officier du Minist√®re Public,\n\nJ'ai l'honneur de porter √† votre connaissance ma contestation formelle du proc√®s-verbal n¬∞ [Num√©ro] dress√© le [Date] √† [Heure] pour [Motif] sur la voie publique sise [Lieu exact].\n\nApr√®s examen attentif des circonstances de fait et de droit, je conteste cette verbalisation pour les motifs juridiques suivants :\n\n[Expos√© d√©taill√© et argument√© des moyens de contestation]\n\nEn cons√©quence, et conform√©ment aux dispositions l√©gales en vigueur, je sollicite respectueusement l'annulation pure et simple de cette contravention.\n\nDans l'attente de votre d√©cision motiv√©e, je vous prie d'agr√©er, Monsieur l'Officier du Minist√®re Public, l'expression de ma haute consid√©ration.",
                "pj": ["Copie int√©grale du proc√®s-verbal contest√©", "Photographies horodat√©es des lieux", "Attestations circonstanci√©es de t√©moins", "Justificatif d'identit√© en cours de validit√©"],
                "signature": "[Pr√©nom NOM]\n[Adresse compl√®te avec code postal]\nT√©l. : [Num√©ro de t√©l√©phone]\nFait √† [Ville], le [Date]"
            },
            "checklist": [
                "Respecter imp√©rativement le d√©lai l√©gal de 45 jours √† compter de la r√©ception de l'avis (art. L121-3 Code de la route)",
                "Photographier exhaustivement les lieux avec horodatage pour constitution de preuves",
                "Recueillir des t√©moignages √©crits et sign√©s de personnes pr√©sentes lors des faits all√©gu√©s",
                "V√©rifier scrupuleusement l'exactitude des mentions obligatoires du proc√®s-verbal",
                "Conserver pr√©cieusement l'original de l'avis de contravention et tous les accus√©s de r√©ception",
                "Calculer pr√©cis√©ment les d√©lais de prescription et de recours pour anticiper les √©ch√©ances"
            ],
            "mentions": "Aide juridique automatis√©e ‚Äì ne se substitue aucunement aux conseils personnalis√©s d'un avocat sp√©cialis√©. Respecter imp√©rativement le d√©lai de contestation de 45 jours. En cas de complexit√© particuli√®re, solliciter l'assistance d'un professionnel du droit. Possibilit√© de recours devant le tribunal comp√©tent en cas de rejet non motiv√©."
        },
        "travail": {
            "resume": [
                "Rassembler les preuves des heures suppl√©mentaires",
                "Calculer le montant exact des sommes dues",
                "Adresser une mise en demeure √† l'employeur",
                "Saisir le conseil de prud'hommes si √©chec",
                "Conserver toutes les pi√®ces justificatives"
            ],
            "lettre": {
                "destinataire_bloc": "Service Ressources Humaines\n[Adresse de l'entreprise]",
                "objet": "Demande de paiement - Heures suppl√©mentaires",
                "corps": "Monsieur le Directeur,\n\nJe vous informe que des heures suppl√©mentaires effectu√©es n'ont pas √©t√© r√©mun√©r√©es conform√©ment au Code du travail.\n\n[D√©tail des heures et calcul]\n\nJe vous demande le r√®glement sous 30 jours.",
                "pj": ["Planning de travail", "Relev√©s d'heures", "Contrat de travail", "Convention collective"],
                "signature": "[Nom Pr√©nom]\n[Adresse]\nLe [Date]"
            },
            "checklist": [
                "Rassembler tous les justificatifs d'heures",
                "V√©rifier les taux major√©s applicables",
                "Envoyer la demande en LRAR",
                "Respecter le d√©lai de prescription de 3 ans"
            ],
            "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil d'avocat. Respecter les d√©lais de prescription et de saisine prud'homale."
        },
        "loyers": {
            "resume": [
                "Analyser l'applicabilit√© de l'encadrement des loyers dans la zone g√©ographique concern√©e",
                "Consulter les donn√©es officielles de loyers de r√©f√©rence aupr√®s des services municipaux comp√©tents",
                "Calculer m√©thodiquement l'√©ventuel d√©passement par rapport au loyer de r√©f√©rence l√©gal",
                "Constituer un dossier documentaire exhaustif avec toutes les pi√®ces justificatives",
                "Adresser une mise en demeure formelle au bailleur en lettre recommand√©e avec AR",
                "Saisir la commission d√©partementale de conciliation en cas d'√©chec de la n√©gociation amiable",
                "Engager une action devant le tribunal judiciaire si la situation n'est pas r√©gularis√©e"
            ],
            "lettre": {
                "destinataire_bloc": "Monsieur/Madame [Nom du bailleur]\n[Qualit√© : Propri√©taire bailleur]\n[Adresse compl√®te du bailleur]\n[Code postal] [Ville]",
                "objet": "Contestation formelle du montant du loyer - Logement sis [Adresse] - Encadrement des loyers",
                "corps": "Monsieur/Madame le Bailleur,\n\nJ'ai l'honneur de porter √† votre connaissance ma contestation formelle concernant le montant du loyer pratiqu√© pour le logement que j'occupe.\n\nApr√®s v√©rification aupr√®s des services comp√©tents, il appara√Æt que le loyer mensuel d√©passe manifestement les plafonds l√©gaux en vigueur.\n\n[Expos√© d√©taill√© du calcul et du d√©passement constat√©]\n\nConform√©ment aux dispositions l√©gales en vigueur, je vous demande de proc√©der √† la r√©gularisation de cette situation.\n\nJe vous prie d'agr√©er, Monsieur/Madame le Bailleur, l'expression de ma consid√©ration distingu√©e.",
                "pj": ["Bail de location original", "Quittances de loyer des 12 derniers mois", "Donn√©es officielles des loyers de r√©f√©rence", "Justificatif d'identit√© en cours de validit√©"],
                "signature": "[Pr√©nom NOM]\nLocataire\n[Adresse compl√®te]\nT√©l√©phone : [Num√©ro]\nFait √† [Ville], le [Date]"
            },
            "checklist": [
                "V√©rifier l'applicabilit√© de l'encadrement des loyers dans votre commune et arrondissement",
                "Consulter les donn√©es officielles des loyers de r√©f√©rence sur le site de la pr√©fecture",
                "Calculer pr√©cis√©ment le d√©passement en fonction de la surface et des caract√©ristiques du logement",
                "Rassembler toutes les pi√®ces justificatives n√©cessaires √† la constitution du dossier",
                "Envoyer la mise en demeure en lettre recommand√©e avec accus√© de r√©ception",
                "Respecter les d√©lais de prescription triennale pour les actions en r√©cup√©ration de loyers",
                "Conserver pr√©cieusement tous les documents et accus√©s de r√©ception"
            ],
            "mentions": "Aide juridique automatis√©e ‚Äì ne se substitue pas aux conseils d'un avocat sp√©cialis√© en droit immobilier. V√©rifier imp√©rativement l'applicabilit√© de l'encadrement des loyers dans votre commune. Possibilit√© de recours devant la commission de conciliation puis devant le tribunal judiciaire. D√©lai de prescription : 3 ans pour les actions en restitution de loyers ind√ªment per√ßus."
        },
        "css": {
            "resume": [
                "Bonne nouvelle : v√©rifier votre √©ligibilit√© CSS selon vos revenus - vous pourriez √™tre surpris(e) des √©conomies possibles !",
                "Rassembler tranquillement vos justificatifs - on vous guide pour ne rien oublier",
                "Remplir le formulaire S3715 sans stress - il est plus simple qu'il n'y para√Æt",
                "D√©poser votre dossier √† la CPAM - ils sont l√† pour vous aider, n'h√©sitez pas √† demander conseil",
                "Suivre sereinement le traitement (2 mois maximum) - la CPAM a l'obligation de vous r√©pondre",
                "D√®s l'accord, votre CSS fonctionne imm√©diatement - fini les frais m√©dicaux qui plombent le budget !",
                "Programmer le renouvellement dans un an - un simple rappel et vous √™tes tranquille",
                "Profiter de votre protection sant√© - vous l'avez m√©rit√© et c'est votre droit !"
            ],
            "lettre": {
                "destinataire_bloc": "Caisse Primaire d'Assurance Maladie\nService Compl√©mentaire Sant√© Solidaire\n[Adresse CPAM de votre d√©partement]\n[Code postal] [Ville]",
                "objet": "Demande de Compl√©mentaire Sant√© Solidaire - Situation [situation sp√©cifique]",
                "corps": "Madame, Monsieur,\n\nJ'ai l'honneur de solliciter l'attribution de la Compl√©mentaire Sant√© Solidaire pour mon foyer.\n\nMa situation actuelle me permet de pr√©tendre √† cette aide pr√©cieuse qui m'assurerait un acc√®s aux soins sans frais suppl√©mentaires.\n\n[Ici sera int√©gr√©e votre situation personnelle selon vos donn√©es]\n\nCette demande s'inscrit dans le cadre de la solidarit√© nationale pour l'acc√®s aux soins, et j'esp√®re que mon dossier recevra un accueil favorable.\n\nVous trouverez ci-joint l'ensemble des pi√®ces justificatives requises. Je me tiens √† votre disposition pour tout compl√©ment d'information.\n\nJe vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations respectueuses.",
                "pj": ["Formulaire S3715 d√ªment compl√©t√© et sign√©", "Justificatifs de revenus des 3 derniers mois", "Justificatif de domicile r√©cent", "Copie de pi√®ce d'identit√©", "Attestation de situation (si applicable)", "RIB pour les remboursements"],
                "signature": "[Votre pr√©nom et NOM]\n[Votre adresse compl√®te]\n[Code postal et ville]\nN¬∞ S√©curit√© Sociale : [Votre num√©ro]\nT√©l√©phone : [Votre num√©ro]\nFait √† [Votre ville], le [Date du jour]"
            },
            "checklist": [
                "‚úÖ Calculer votre √©ligibilit√© pr√©cise selon vos revenus annuels - utilisez le simulateur ameli.fr si besoin",
                "üìã R√©cup√©rer le formulaire S3715 sur ameli.fr ou dans votre agence CPAM (accueil toujours disponible)",
                "üíº Rassembler vos justificatifs de revenus r√©cents - m√™me modestes, ils prouvent vos droits",
                "üè† Joindre un justificatif de domicile r√©cent - facture, quittance, ou attestation d'h√©bergement",
                "üìÆ D√©poser rapidement votre dossier complet - plus vite c'est fait, plus vite vous √™tes prot√©g√©(e)",
                "üìÅ Conserver pr√©cieusement vos copies et l'accus√© de r√©ception - c'est votre s√©curit√©",
                "‚è∞ Noter le d√©lai de 2 mois pour la r√©ponse - et n'h√©sitez pas √† relancer si besoin",
                "üîÑ Pr√©voir le renouvellement annuel √† l'avance - un courrier vous le rappellera"
            ],
            "mentions": "ü§ñ Cette aide automatis√©e √©value vos droits selon la l√©gislation en vigueur. üí∞ La CSS peut vous faire √©conomiser des centaines d'euros par an en frais de sant√©. ‚öñÔ∏è En cas de refus, vous avez 2 mois pour faire un recours aupr√®s de la CRA. üè• Avec la CSS, tous vos soins courants sont pris en charge sans avance de frais. üí™ N'h√©sitez pas √† faire valoir vos droits - c'est fait pour vous aider ! üìû Votre CPAM peut vous renseigner : ils sont l√† pour √ßa."
        },
        "caf": {
            "resume": [
                "Analyser le courrier CAF re√ßu pour identifier pr√©cis√©ment votre situation et vos droits",
                "Rassembler tous les justificatifs prouvant l'erreur ou l'irr√©gularit√© de la d√©cision CAF",
                "R√©diger un recours gracieux argument√© dans le d√©lai de 2 mois suivant la notification",
                "Envoyer votre contestation en LRAR √† la CAF avec votre num√©ro d'allocataire",
                "Suivre votre recours et relancer la CAF si n√©cessaire apr√®s 2 mois",
                "Pr√©parer un √©ventuel recours devant la CRA en cas de rejet du recours gracieux"
            ],
            "lettre": {
                "destinataire_bloc": "Caisse d'Allocations Familiales\nService Contentieux et Recours\n[Adresse CAF de votre d√©partement]\n[Code postal] [Ville]",
                "objet": "Recours gracieux - Num√©ro allocataire [N¬∞ allocataire]",
                "corps": "Madame, Monsieur,\n\nAllocataire sous le num√©ro [N¬∞ allocataire], je vous adresse la pr√©sente afin de contester votre d√©cision.\n\nApr√®s examen de votre courrier, je conteste cette d√©cision pour les motifs suivants :\n\n[Expos√© de votre situation et arguments]\n\nConform√©ment au Code de la s√©curit√© sociale, je sollicite un recours gracieux et vous demande de r√©examiner mon dossier.\n\nJe vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations respectueuses.",
                "pj": ["Courrier CAF contest√©", "Justificatifs de situation", "Pi√®ce d'identit√©", "Num√©ro allocataire"],
                "signature": "[Pr√©nom NOM]\n[Adresse]\nAllocataire n¬∞ [N¬∞ allocataire]\nLe [Date]"
            },
            "checklist": [
                "Respecter le d√©lai de recours de 2 mois apr√®s r√©ception du courrier CAF",
                "Rassembler tous justificatifs prouvant l'erreur de la CAF",
                "Envoyer le recours en LRAR avec num√©ro allocataire",
                "Conserver copies et accus√©s de r√©ception"
            ],
            "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil d'avocat. D√©lai de recours : 2 mois. Possibilit√© de saisir la CRA en cas d'√©chec."
        },
        "energie": {
            "resume": [
                "Analyser la facture d'√©nergie anormalement √©lev√©e pour identifier les √©l√©ments contestables",
                "Relever et photographier les index de compteurs pour constitution de preuves",
                "Comparer avec l'historique de consommation des p√©riodes pr√©c√©dentes",
                "Contester formellement aupr√®s du fournisseur dans le d√©lai de 2 mois",
                "Demander une v√©rification du comptage et une rectification de facturation",
                "Saisir le m√©diateur de l'√©nergie en cas d'√©chec de la contestation amiable"
            ],
            "lettre": {
                "destinataire_bloc": "[Fournisseur d'√©nergie]\nService Client√®le - R√©clamations\n[Adresse du fournisseur]\n[Code postal] [Ville]",
                "objet": "Contestation facture - Facturation anormalement √©lev√©e",
                "corps": "Madame, Monsieur,\n\nClient de votre soci√©t√©, je conteste la facture re√ßue qui pr√©sente une consommation anormalement √©lev√©e.\n\nApr√®s v√©rification, cette facturation semble erron√©e par rapport √† ma consommation habituelle.\n\nJe vous demande de proc√©der √† une v√©rification et rectification.\n\nJe vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration distingu√©e.",
                "pj": ["Facture contest√©e", "Relev√©s ant√©rieurs", "Photos index compteurs", "Historique factures"],
                "signature": "[Pr√©nom NOM]\n[Adresse]\nN¬∞ client : [Num√©ro]\nLe [Date]"
            },
            "checklist": [
                "Conserver la facture originale et tous documents",
                "Relever et photographier les index de compteurs",
                "Envoyer la contestation en LRAR dans les 2 mois",
                "Pr√©parer le recours au m√©diateur si n√©cessaire"
            ],
            "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil d'avocat. D√©lai de contestation : 2 mois. Recours possible au m√©diateur de l'√©nergie."
        },
        "aides": {
            "resume": [
                "Analyser votre situation pour identifier toutes les aides auxquelles vous pouvez pr√©tendre",
                "Calculer votre √©ligibilit√© selon vos revenus et composition familiale",
                "Constituer un dossier complet avec tous les justificatifs n√©cessaires",
                "D√©poser les demandes aupr√®s des organismes comp√©tents (CAF, Conseil D√©partemental, etc.)",
                "Suivre le traitement de vos demandes et relancer si n√©cessaire",
                "Faire valoir vos droits en cas de refus non justifi√©"
            ],
            "lettre": {
                "destinataire_bloc": "Service des Aides Sociales\n[Organisme comp√©tent]\n[Adresse]\n[Code postal] [Ville]",
                "objet": "Demande d'aide sociale",
                "corps": "Madame, Monsieur,\n\nJe sollicite l'attribution d'une aide sociale compte tenu de ma situation.\n\nMa situation me place dans une pr√©carit√© qui justifie cette demande selon la r√©glementation.\n\nVous trouverez ci-joint les pi√®ces justificatives n√©cessaires.\n\nJe vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations respectueuses.",
                "pj": ["Justificatifs de revenus", "Justificatif de domicile", "Pi√®ce d'identit√©", "Justificatifs de situation"],
                "signature": "[Pr√©nom NOM]\n[Adresse]\nLe [Date]"
            },
            "checklist": [
                "V√©rifier l'√©ligibilit√© aux diff√©rentes aides selon vos revenus",
                "Rassembler tous les justificatifs demand√©s",
                "D√©poser les dossiers dans les d√©lais",
                "Suivre les r√©ponses et faire les recours si n√©cessaire"
            ],
            "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil d'assistant social. D√©lais variables selon les aides. Recours possibles en cas de refus."
        },
        "sante": {
            "resume": [
                "Identifier vos besoins de sant√© urgents ou non urgents selon votre situation",
                "Rechercher un m√©decin disponible dans les d√©lais l√©gaux (6 jours maximum)",
                "Utiliser les plateformes de t√©l√©consultation si acc√®s difficile",
                "Contacter les services d'urgence si situation critique (15, 112)",
                "Faire valoir vos droits √† l'acc√®s aux soins dans votre secteur g√©ographique",
                "Solliciter l'aide des organismes comp√©tents si difficult√©s persistantes"
            ],
            "lettre": {
                "destinataire_bloc": "Centre de soins\n[Adresse du centre]\n[Code postal] [Ville]",
                "objet": "Demande d'acc√®s aux soins",
                "corps": "Madame, Monsieur,\n\nJe rencontre des difficult√©s pour acc√©der aux soins dans ma r√©gion.\n\nJe sollicite votre aide pour √™tre orient√©(e) vers les professionnels disponibles.\n\nJe vous remercie de votre aide.\n\nJe vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration distingu√©e.",
                "pj": ["Justificatif de domicile", "Carte Vitale", "Ordonnances r√©centes"],
                "signature": "[Pr√©nom NOM]\n[Adresse]\nLe [Date]"
            },
            "checklist": [
                "Contacter votre CPAM pour obtenir la liste des m√©decins",
                "Consulter les plateformes en ligne (Doctolib, etc.)",
                "En urgence : composer le 15 (SAMU) ou 112",
                "Faire valoir le d√©lai l√©gal de 6 jours"
            ],
            "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil m√©dical. En urgence : 15 ou 112. D√©lai l√©gal d'acc√®s aux soins : 6 jours."
        },
        "usure": {
            "resume": [
                "V√©rifier si le taux d'int√©r√™t de votre cr√©dit d√©passe le seuil d'usure l√©gal",
                "Calculer pr√©cis√©ment le TEG et comparer aux taux Banque de France",
                "Rassembler tous les documents du contrat de cr√©dit litigieux",
                "Contester aupr√®s de la banque le d√©passement du taux d'usure",
                "Demander le remboursement des int√©r√™ts ind√ªment per√ßus",
                "Saisir l'ACPR ou la Banque de France en cas d'√©chec"
            ],
            "lettre": {
                "destinataire_bloc": "[Banque]\nService Juridique\n[Adresse]\n[Code postal] [Ville]",
                "objet": "Contestation taux d'usure - Cr√©dit",
                "corps": "Madame, Monsieur,\n\nJe conteste le taux d'int√©r√™t appliqu√© √† mon cr√©dit qui d√©passe le taux d'usure l√©gal.\n\nCette situation constitue une infraction au Code de la consommation.\n\nJe demande la rectification imm√©diate et le remboursement des int√©r√™ts indus.\n\nJe vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration distingu√©e.",
                "pj": ["Contrat de cr√©dit", "Tableaux d'amortissement", "Taux d'usure Banque de France"],
                "signature": "[Pr√©nom NOM]\n[Adresse]\nLe [Date]"
            },
            "checklist": [
                "Consulter les taux d'usure sur banque-france.fr",
                "Calculer pr√©cis√©ment le TEG de votre cr√©dit",
                "Conserver tous documents du cr√©dit",
                "Pr√©parer recours ACPR si √©chec"
            ],
            "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil d'avocat. V√©rifier taux d'usure Banque de France. Recours ACPR possible."
        },
        "expulsions": {
            "resume": [
                "V√©rifier si vous √™tes en p√©riode de tr√™ve hivernale (protection renforc√©e)",
                "Analyser la proc√©dure d'expulsion pour identifier les irr√©gularit√©s",
                "Saisir le Fonds de Solidarit√© Logement (FSL) en urgence",
                "N√©gocier un √©ch√©ancier de paiement avec le bailleur",
                "Pr√©parer votre d√©fense pour l'audience au tribunal",
                "Faire valoir tous vos droits et protections l√©gales"
            ],
            "lettre": {
                "destinataire_bloc": "[Bailleur]\n[Adresse]\n[Code postal] [Ville]",
                "objet": "Demande de d√©lais - Expulsion locative",
                "corps": "Madame, Monsieur,\n\nSuite √† l'assignation re√ßue, je sollicite un d√©lai de paiement.\n\nMa situation ne me permet pas un r√®glement imm√©diat.\n\nJe suis en d√©marche FSL et propose un √©ch√©ancier.\n\nJe vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration distingu√©e.",
                "pj": ["Assignation", "Justificatifs revenus", "Demande FSL", "Proposition √©ch√©ancier"],
                "signature": "[Pr√©nom NOM]\n[Adresse]\nLe [Date]"
            },
            "checklist": [
                "V√©rifier p√©riode tr√™ve hivernale (1er nov - 31 mars)",
                "D√©poser demande FSL en urgence",
                "Pr√©parer d√©fense pour audience",
                "N√©gocier √©ch√©ancier avec bailleur"
            ],
            "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil d'avocat. Tr√™ve hivernale prot√®ge contre expulsions. Aide FSL disponible."
        },
        "ecole": {
            "resume": [
                "URGENT - Signaler imm√©diatement le harc√®lement au chef d'√©tablissement",
                "Contacter le 3020 (num√©ro national anti-harc√®lement) pour accompagnement",
                "Constituer un dossier de preuves d√©taill√© avec dates et t√©moignages",
                "Exiger la mise en place du protocole anti-harc√®lement de l'√©tablissement",
                "Solliciter un accompagnement psychologique pour votre enfant",
                "Porter plainte si violences physiques av√©r√©es"
            ],
            "lettre": {
                "destinataire_bloc": "Chef d'√âtablissement\n[√âtablissement]\n[Adresse]\n[Code postal] [Ville]",
                "objet": "SIGNALEMENT URGENT - Harc√®lement scolaire",
                "corps": "Madame, Monsieur le Chef d'√âtablissement,\n\nJe porte √† votre connaissance avec urgence que mon enfant est victime de harc√®lement scolaire.\n\nCette situation n√©cessite la mise en ≈ìuvre imm√©diate du protocole de protection.\n\nJe sollicite un rendez-vous urgent.\n\nJe vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration.",
                "pj": ["Preuves du harc√®lement", "Certificats m√©dicaux", "T√©moignages"],
                "signature": "[Pr√©nom NOM]\nParent de [Pr√©nom enfant]\nLe [Date]"
            },
            "checklist": [
                "Contacter le 3020 imm√©diatement",
                "Demander rendez-vous urgent avec direction",
                "Documenter tous les faits avec preuves",
                "Porter plainte si violences physiques"
            ],
            "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil sp√©cialis√©. Urgence : 3020. Harc√®lement = d√©lit p√©nal si av√©r√©."
        },
        "decodeur": {
            "resume": [
                "Analyser m√©thodiquement le courrier re√ßu pour en comprendre les enjeux",
                "Identifier vos obligations l√©gales et d√©lais √† respecter",
                "Distinguer ce qui rel√®ve de l'information et ce qui exige une action",
                "Pr√©parer une r√©ponse adapt√©e si une r√©action est n√©cessaire",
                "Conserver l'original et constituer un dossier de suivi",
                "Faire valoir vos droits en cas de demande abusive"
            ],
            "lettre": {
                "destinataire_bloc": "[Exp√©diteur]\n[Adresse]\n[Code postal] [Ville]",
                "objet": "R√©ponse √† votre courrier",
                "corps": "Madame, Monsieur,\n\nJ'ai bien re√ßu votre courrier.\n\nApr√®s examen, je vous apporte les √©l√©ments suivants :\n\n[Votre r√©ponse selon le contenu]\n\nJe me tiens √† disposition pour compl√©ment.\n\nJe vous prie d'agr√©er, Madame, Monsieur, l'expression de ma consid√©ration distingu√©e.",
                "pj": ["Copie courrier re√ßu", "Documents justificatifs", "Pi√®ce d'identit√©"],
                "signature": "[Pr√©nom NOM]\n[Adresse]\nLe [Date]"
            },
            "checklist": [
                "Conserver l'original et faire des copies",
                "Respecter les d√©lais mentionn√©s",
                "Rassembler documents demand√©s",
                "V√©rifier la l√©gitimit√© des demandes"
            ],
            "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil juridique. V√©rifier l√©gitimit√© des demandes. Respecter d√©lais l√©gaux."
        }
    }
    
    # Return tool-specific mock with user data integration or generic fallback
    if tool_id in mock_responses:
        response = mock_responses[tool_id].copy()
        
        # Integrate user data for specific tools
        if tool_id == "amendes" and user_fields:
            response = integrate_amendes_data(response, user_fields)
        elif tool_id == "loyers" and user_fields:
            response = integrate_loyers_data(response, user_fields)
        elif tool_id == "css" and user_fields:
            response = integrate_css_data(response, user_fields)
        elif tool_id == "travail" and user_fields:
            response = integrate_travail_data(response, user_fields)
        elif tool_id == "caf" and user_fields:
            response = integrate_caf_data(response, user_fields)
        elif tool_id == "energie" and user_fields:
            response = integrate_energie_data(response, user_fields)
        elif tool_id == "aides" and user_fields:
            response = integrate_aides_data(response, user_fields)
        elif tool_id == "sante" and user_fields:
            response = integrate_sante_data(response, user_fields)
        elif tool_id == "usure" and user_fields:
            response = integrate_usure_data(response, user_fields)
        elif tool_id == "expulsions" and user_fields:
            response = integrate_expulsions_data(response, user_fields)
        elif tool_id == "ecole" and user_fields:
            response = integrate_ecole_data(response, user_fields)
        elif tool_id == "decodeur" and user_fields:
            response = integrate_decodeur_data(response, user_fields)
        
        # Apply quality enhancement to all responses
        response = enhance_response_quality(response, user_fields, tool_id)
        
        # Also render letter template for mock responses to maintain consistency
        try:
            prompt_data = prompting.build_prompt(tool_id, user_fields or {})
            template_str = prompt_data['template']
            
            # Ensure we have valid template variables by merging response letter data with user fields
            template_vars = {
                'tool_id': tool_id,
                **(user_fields or {}),  # User form data
                **response.get('lettre', {}),  # Generated letter components from mock
            }
            
            # Special handling to ensure key elements appear in rendered letters
            if tool_id == "amendes" and user_fields:
                template_vars.update({
                    'numero_process_verbal': user_fields.get('numero_process_verbal'),
                    'date_infraction': user_fields.get('date_infraction'),
                    'lieu': user_fields.get('lieu'),
                    'motif_contestation': user_fields.get('motif_contestation'),
                })
            elif tool_id == "caf" and user_fields:
                template_vars.update({
                    'numero_allocataire': user_fields.get('numero_allocataire'),
                    'type_courrier': user_fields.get('type_courrier'),
                })
            
            rendered_letter = render_letter_with_template(template_str, {'lettre': template_vars}, template_vars, tool_id)
            response['lettre'] = rendered_letter
        except Exception as e:
            logger.warning(f"Template rendering failed in mock response: {e}")
            # Keep the original dict format as fallback
        
        return response
    
    # Generic enhanced fallback for other tools
    generic_response = {
        "resume": [
            "Pas de panique : analyser calmement votre situation pour identifier vos droits et les d√©marches appropri√©es",
            "Prendre le temps de rassembler tous vos documents - m√™me si cela semble complexe, chaque pi√®ce a son importance",
            "R√©diger votre courrier en suivant nos conseils - vous avez toutes les cl√©s pour √™tre convaincant(e)",
            "Envoyer en lettre recommand√©e pour √™tre pris(e) au s√©rieux - c'est votre garantie l√©gale",
            "Suivre votre dossier sans stress - les administrations ont des d√©lais √† respecter",
            "Rester confiant(e) : en connaissant vos droits et en suivant la proc√©dure, vous maximisez vos chances de succ√®s",
            "Si besoin, ne pas h√©siter √† faire appel - vous avez des recours, utilisez-les !",
            "Garder toutes vos preuves pr√©cieusement - c'est votre meilleure protection"
        ],
        "lettre": {
            "destinataire_bloc": "Service comp√©tent\n[Nom pr√©cis du service concern√©]\n[Adresse compl√®te du service]\n[Code postal] [Ville]",
            "objet": f"Demande concernant {tool_id.replace('_', ' ').title()} - Dossier personnel",
            "corps": "Madame, Monsieur,\n\nJ'ai l'honneur de m'adresser √† vos services concernant ma situation qui n√©cessite votre expertise et votre intervention.\n\n[Ici, vous exposerez clairement votre situation en vous appuyant sur les faits et vos droits]\n\nJe suis convaincu(e) que ma demande est justifi√©e et j'esp√®re qu'elle recevra un accueil favorable de votre part.\n\nVous trouverez ci-joint les documents n√©cessaires √† l'examen de mon dossier. Je reste √† votre disposition pour tout compl√©ment d'information.\n\nDans l'attente de votre r√©ponse, je vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations respectueuses.",
            "pj": ["Documents justifiant votre situation", "Pi√®ce d'identit√© en cours de validit√©", "Justificatif de domicile r√©cent", "Tout document pertinent selon votre cas"],
            "signature": "[Votre pr√©nom et NOM]\n[Votre adresse compl√®te]\n[Code postal et ville]\nT√©l√©phone : [Votre num√©ro]\nEmail : [Votre email]\n\nFait √† [Votre ville], le [Date du jour]"
        },
        "checklist": [
            "üìã Faire une copie de tous vos documents avant envoi - c'est votre s√©curit√©",
            "‚è∞ Bien noter les d√©lais √† respecter et les programmer dans votre agenda",
            "üìé Rassembler toutes les pi√®ces demand√©es - m√™me si cela prend du temps, c'est essentiel",
            "üì¨ Envoyer en recommand√© avec accus√© de r√©ception - gardez pr√©cieusement ce papier",
            "üìÖ Noter la date limite de r√©ponse et programmer un rappel si n√©cessaire",
            "üí™ Rester patient(e) mais vigilant(e) - vous avez fait le n√©cessaire",
            "üîÑ En cas de probl√®me, ne pas h√©siter √† relancer ou faire appel - c'est votre droit",
            "üìû Si vous avez des doutes, contacter le service concern√© - ils sont l√† pour vous aider"
        ],
        "mentions": "ü§ñ Cette aide automatis√©e vous donne les bases pour bien d√©marrer vos d√©marches. üí™ Vous avez des droits, n'h√©sitez pas √† les faire valoir ! ‚öñÔ∏è En cas de doute, un avocat peut vous conseiller pour les situations complexes. üìû Les services publics ont l'obligation de vous renseigner - n'h√©sitez pas √† les contacter. üïí Respectez bien les d√©lais, mais ne vous mettez pas de pression inutile. üéØ Avec de la m√©thode et de la pers√©v√©rance, la plupart des d√©marches aboutissent positivement."
    }
    
    return enhance_response_quality(generic_response, user_fields, tool_id)

def validate_and_fix_response(response_data: Dict[str, Any], tool_id: str) -> Dict[str, Any]:
    """Validate response has required keys and fix if needed"""
    required_keys = ["resume", "lettre", "checklist", "mentions"]
    
    # Check if all required keys exist
    for key in required_keys:
        if key not in response_data:
            return get_mock_response(tool_id)
    
    # Check lettre structure
    if not isinstance(response_data.get("lettre"), dict):
        return get_mock_response(tool_id)
    
    lettre_keys = ["destinataire_bloc", "objet", "corps", "pj", "signature"]
    for key in lettre_keys:
        if key not in response_data["lettre"]:
            return get_mock_response(tool_id)
    
    # Ensure arrays are arrays
    if not isinstance(response_data.get("resume"), list):
        response_data["resume"] = ["√âtape 1 : Pr√©parez vos pi√®ces."]
    if not isinstance(response_data.get("checklist"), list):
        response_data["checklist"] = ["D√©lai indicatif 30‚Äì45 jours"]
    if not isinstance(response_data["lettre"].get("pj"), list):
        response_data["lettre"]["pj"] = ["Copie du document"]
    
    return response_data

def call_openai_with_retry(system_prompt: str, user_prompt: str, max_retries: int = 3, is_repair: bool = False) -> Dict[str, Any]:
    """Call OpenAI with exponential backoff retry logic"""
    if not openai_client:
        raise Exception("OpenAI client not available")
    
    # Use gpt-4o for main generation, gpt-4o-mini for repair
    model = "gpt-4o-mini" if is_repair else "gpt-4o"
    max_tokens = 1200
    timeout = 20  # 15-20s per pass as specified
    
    for attempt in range(max_retries):
        try:
            start_time = time.time()
            response = openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                response_format={"type": "json_object"},
                temperature=0.2,
                max_tokens=max_tokens,
                timeout=timeout
            )
            
            duration = time.time() - start_time
            logger.info(f"OpenAI call successful - model: {model}, duration: {duration:.2f}s, attempt: {attempt + 1}")
            
            content = response.choices[0].message.content
            try:
                return json.loads(content)
            except json.JSONDecodeError:
                if is_repair:
                    # If repair also fails, raise exception
                    raise Exception("Repair attempt failed - invalid JSON")
                
                # Try repair with explicit prompt
                logger.warning(f"JSON decode error, attempting repair")
                repair_prompt = f"R√©parez ce JSON en format valide avec les cl√©s resume[], lettre{{}}, checklist[], mentions: {content}"
                return call_openai_with_retry(
                    "Vous √™tes un r√©parateur de JSON. Retournez uniquement du JSON valide.",
                    repair_prompt,
                    max_retries=2,
                    is_repair=True
                )
                
        except openai.RateLimitError:
            # 429 - Rate limit
            if attempt < max_retries - 1:
                wait_time = (2 ** attempt) + (attempt * 0.1)  # Exponential backoff
                logger.warning(f"Rate limit hit, waiting {wait_time:.1f}s")
                time.sleep(wait_time)
                continue
            logger.error("Max retries exceeded due to rate limiting")
            raise
        except (openai.APITimeoutError, openai.InternalServerError, openai.APIError) as e:
            # Timeout, 5xx errors
            if attempt < max_retries - 1:
                wait_time = (2 ** attempt) + (attempt * 0.1)  # Exponential backoff
                logger.warning(f"API error: {type(e).__name__}, waiting {wait_time:.1f}s")
                time.sleep(wait_time)
                continue
            logger.error(f"Max retries exceeded due to API errors: {e}")
            raise
        except Exception as e:
            # Any other error
            logger.error(f"Unexpected error in OpenAI call: {e}")
            raise
    
    raise Exception("Max retries exceeded")

def render_letter_with_template(template_str: str, generated_data: Dict[str, Any], user_fields: Dict[str, Any], tool_id: str) -> str:
    """Render final letter using Jinja template"""
    try:
        # Prepare template variables
        template_vars = {
            'tool_id': tool_id,
            **user_fields,  # Include all user form data
            **generated_data.get('lettre', {}),  # Include generated letter components
        }
        
        # Render template
        template = Template(template_str)
        rendered = template.render(**template_vars)
        
        return rendered.strip()
        
    except Exception as e:
        logger.error(f"Template rendering failed: {e}")
        # Fallback to basic letter structure
        lettre = generated_data.get('lettre', {})
        return f"""DESTINATAIRE: {lettre.get('destinataire_bloc', 'Service comp√©tent')}

OBJET: {lettre.get('objet', f'Courrier ‚Äì {tool_id.upper()}')}

CORPS:
{lettre.get('corps', 'Corps de la lettre...')}

PI√àCES JOINTES:
{chr(10).join(f'- {pj}' for pj in lettre.get('pj', ['Document de r√©f√©rence']))}

SIGNATURE:
{lettre.get('signature', '[Votre nom et adresse]')}

---
Lettre g√©n√©r√©e automatiquement ‚Äì √† relire avant envoi."""

def generate_with_schema_driven_approach(tool_id: str, payload: Dict[str, Any]) -> Dict[str, Any]:
    """Generate response using schema-driven approach with 2-pass system"""
    try:
        # Build prompt using schema-driven approach
        prompt_data = prompting.build_prompt(tool_id, payload)
        
        # Construct enhanced system prompt for 2-pass generation
        system_prompt = f"""{prompt_data['system']}

{prompt_data['instructions']}

Tu dois OBLIGATOIREMENT r√©pondre avec un JSON valide contenant exactement ces 4 cl√©s:
- "resume": array de 5-8 strings concr√®tes (√©tapes √† suivre avec conseil rassurant)
- "lettre": objet avec les cl√©s "destinataire_bloc", "objet", "corps", "pj" (array), "signature"  
- "checklist": array de 3-6 strings (actions claires, verbes √† l'infinitif)
- "mentions": string (2-4 rappels juridiques bienveillants)

PASS 1: G√©n√®re un brouillon JSON avec toutes les cl√©s requises."""
        
        # User prompt with context and examples
        user_prompt = f"""Contexte utilisateur:
{prompt_data['context']}

Utilise ces blueprints comme guide:
Checklist: {prompt_data['checklist_blueprint']}
Mentions: {prompt_data['mentions_blueprint']}

G√©n√®re une r√©ponse JSON compl√®te et personnalis√©e selon le contexte."""
        
        # Pass 1: Initial generation
        logger.info(f"Schema-driven Pass 1 - Initial generation for tool: {tool_id}")
        pass1_response = call_openai_with_retry(system_prompt, user_prompt)
        
        # Validate Pass 1 response
        validated_pass1 = validate_and_fix_response(pass1_response, tool_id)
        
        # Pass 2: Auto-critique and refinement
        logger.info(f"Schema-driven Pass 2 - Auto-critique for tool: {tool_id}")
        critique_prompt = f"""PASS 2 - AUTO-CRITIQUE ET AM√âLIORATION:

JSON g√©n√©r√© en Pass 1:
{json.dumps(validated_pass1, ensure_ascii=False, indent=2)}

AM√âLIORE selon ces crit√®res:

1. PERSONNALISATION MAXIMALE : Int√®gre tous les √©l√©ments du contexte utilisateur (dates, noms, r√©f√©rences, montants). √âvite les formulations g√©n√©riques comme "[√† compl√©ter]".

2. TONALIT√â ADMINISTRATIVE FRAN√áAISE : √âquilibre professionnel et accessible. Formules de politesse appropri√©es mais humaines.

3. STRUCTURE ARGUMENTATIVE : Corps de lettre logique avec introduction, d√©veloppement factuel, demande claire, conclusion cordiale.

4. EXHAUSTIVIT√â RASSURANTE :
   - resume: 5-8 √©tapes d√©taill√©es avec conseils encourageants  
   - checklist: 3-6 actions concr√®tes avec d√©lais pr√©cis
   - mentions: 2-4 rappels juridiques bienveillants

5. PI√àCES JOINTES PERTINENTES : Liste pr√©cise et adapt√©e au cas d'esp√®ce.

R√©ponds avec le JSON am√©lior√©, identique en structure mais optimis√© en qualit√©."""

        pass2_response = call_openai_with_retry(system_prompt, critique_prompt)
        
        # Final validation
        final_response = validate_and_fix_response(pass2_response, tool_id)
        
        # Render letter using Jinja template
        template_str = prompt_data['template']
        rendered_letter = render_letter_with_template(template_str, final_response, payload, tool_id)
        
        # Replace the generated letter with the rendered template
        final_response['lettre'] = rendered_letter
        
        logger.info(f"Schema-driven generation completed for tool: {tool_id}")
        return final_response
        
    except Exception as e:
        logger.error(f"Schema-driven generation failed for {tool_id}: {e}")
        # Fallback to existing mock system
        return get_mock_response(tool_id, payload)

class GenIn(BaseModel):
    tool_id: str
    fields: dict

@app.get("/health")
def health(): return {"ok": True}

@app.post("/generate")
def generate(in_: GenIn):
    # Validate tool_id
    allowed = ["amendes","aides","loyers","travail","sante","caf","usure","energie","expulsions","css","ecole","decodeur"]
    if in_.tool_id not in allowed:
        raise HTTPException(400, "tool_id inconnu")
    
    # Try schema-driven generation with OpenAI, fallback to mock on any error
    if openai_client:
        try:
            # Use new schema-driven approach
            return generate_with_schema_driven_approach(in_.tool_id, in_.fields)
            
        except Exception as e:
            logger.error(f"Schema-driven generation failed for tool {in_.tool_id}: {e}")
    
    # Fallback to mock response
    logger.info(f"Using mock response for tool: {in_.tool_id}")
    return get_mock_response(in_.tool_id, in_.fields)