from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import json
import os
import time
import openai
from openai import OpenAI
from typing import Dict, Any, List
import logging

app = FastAPI(title="Outils Citoyens API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], allow_methods=["*"], allow_headers=["*"], allow_credentials=True
)

# Include chat router
from chat import router as chat_router
app.include_router(chat_router)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Pydantic models for structured output
class Lettre(BaseModel):
    destinataire_bloc: str
    objet: str
    corps: str
    pj: List[str]
    signature: str

class Output(BaseModel):
    resume: List[str]
    lettre: Lettre
    checklist: List[str]
    mentions: str

# OpenAI setup
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai_client = None
if OPENAI_API_KEY:
    openai_client = OpenAI(api_key=OPENAI_API_KEY)

# Load system prompt and templates
def load_system_prompt():
    try:
        with open("system_lumiere.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except:
        return "SYSTEM PROMPT ‚Äì Lumi√®re citoyenne : assistant civique FR, clair, bienveillant, non avocat. Sortie JSON {resume[], lettre{}, checklist[], mentions}."

def load_templates():
    try:
        with open("templates.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {
            "amendes": "Contexte: contestation d'amende. Donn√©es: {fields}",
            "caf": "Contexte: r√©ponse √† un courrier CAF. Donn√©es: {fields}"
        }

SYSTEM_PROMPT = load_system_prompt()
TEMPLATES = load_templates()

def enhance_response_quality(response: Dict[str, Any], user_fields: dict, tool_id: str) -> Dict[str, Any]:
    """Enhance response quality with user-centric improvements"""
    import copy
    enhanced = copy.deepcopy(response)
    
    # Ensure resume is comprehensive and reassuring
    if len(enhanced.get("resume", [])) < 6:
        # Add more helpful steps if too short
        enhanced["resume"].extend([
            "Garder confiance : vous suivez la bonne proc√©dure et vos droits sont prot√©g√©s",
            "En cas de question, ne pas h√©siter √† contacter les services comp√©tents - ils sont l√† pour vous aider"
        ])
    
    # Enhance mentions to be more encouraging
    if "mentions" in enhanced:
        base_mentions = enhanced["mentions"]
        if "ü§ñ" not in base_mentions:  # If not already enhanced
            enhanced["mentions"] = f"ü§ñ {base_mentions} üí™ Vous avez des droits l√©gitimes, n'h√©sitez pas √† les faire valoir avec confiance."
    
    # Personalize signature if user data available
    if "lettre" in enhanced and user_fields:
        # Try to personalize the signature block
        signature = enhanced["lettre"].get("signature", "")
        if "[" in signature and "]" in signature:
            # Replace placeholders with more helpful text
            enhanced["lettre"]["signature"] = signature.replace(
                "[Votre pr√©nom et NOM]", "[Indiquer vos pr√©nom et nom]"
            ).replace(
                "[Votre adresse compl√®te]", "[Votre adresse compl√®te]"
            )
    
    return enhanced

def integrate_css_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into CSS mock response for personalization"""
    import copy
    
    # Deep copy to avoid modifying the original
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    revenu = user_fields.get("revenu_mensuel_net", "[Revenus mensuels]")
    foyer = user_fields.get("foyer", "[Nombre de personnes]")
    age = user_fields.get("age", "[Age]")
    statut = user_fields.get("statut", "[Statut]")
    couverture = user_fields.get("couverture_actuelle", "[Couverture actuelle]")
    
    # Calculate eligibility (simplified 2024 thresholds)
    eligibility_text = "[√âligibilit√© √† calculer]"
    css_type = "CSS sans participation"
    
    if isinstance(revenu, (int, float)) and isinstance(foyer, int):
        annual_income = float(revenu) * 12
        # Simplified thresholds for 2024 (approximate)
        thresholds = {1: 9203, 2: 13804, 3: 16565, 4: 19326, 5: 22087}
        threshold = thresholds.get(int(foyer), 22087 + (int(foyer) - 5) * 2761)
        
        if annual_income <= threshold:
            eligibility_text = f"√âLIGIBLE √† la CSS gratuite (revenus: {annual_income:.0f}‚Ç¨/an, plafond: {threshold}‚Ç¨)"
            css_type = "CSS sans participation financi√®re"
        elif annual_income <= threshold * 1.35:  # Participation bracket
            participation = round((annual_income - threshold) * 0.08 / 12)
            eligibility_text = f"√âLIGIBLE √† la CSS avec participation de {participation}‚Ç¨/mois"
            css_type = "CSS avec participation forfaitaire"
        else:
            eligibility_text = f"NON √âLIGIBLE (revenus: {annual_income:.0f}‚Ç¨/an d√©passent le plafond de {threshold}‚Ç¨)"
            css_type = "Alternative : mutuelle priv√©e ou d'entreprise"
    
    # Personalize resume
    personalized["resume"][0] = f"√âvaluer l'√©ligibilit√© CSS pour un foyer de {foyer} personne(s) avec {revenu}‚Ç¨/mois de revenus"
    personalized["resume"][2] = f"D√©poser la demande CSS aupr√®s de la CPAM avec le formulaire S3715 pour {css_type}"
    
    # Personalize letter
    lettre = personalized["lettre"]
    lettre["destinataire_bloc"] = "Caisse Primaire d'Assurance Maladie\nService Compl√©mentaire Sant√© Solidaire\n[Adresse CPAM de votre d√©partement]\n[Code postal] [Ville]"
    lettre["objet"] = f"Demande de Compl√©mentaire Sant√© Solidaire - Foyer {foyer} personne(s) - Revenus {revenu}‚Ç¨/mois"
    
    statut_text = ""
    if statut in ["chomeur", "demandeur_emploi"]:
        statut_text = " en situation de recherche d'emploi"
    elif statut == "retraite":
        statut_text = " retrait√©(e)"
    elif statut == "etudiant":
        statut_text = " √©tudiant(e)"
    
    lettre["corps"] = f"""Madame, Monsieur,

J'ai l'honneur de solliciter l'attribution de la Compl√©mentaire Sant√© Solidaire pour mon foyer compos√© de {foyer} personne(s){statut_text}, avec des revenus mensuels nets de {revenu}‚Ç¨.

Situation actuelle : {couverture if couverture != "aucune" else "aucune couverture compl√©mentaire sant√©"}.

{eligibility_text}

Veuillez trouver ci-joint l'ensemble des pi√®ces justificatives requises par la r√©glementation en vigueur.

Dans l'attente de votre r√©ponse dans un d√©lai de 2 mois, je vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations respectueuses."""
    
    # Personalize pieces jointes based on status
    pj_list = ["Formulaire S3715 d√ªment compl√©t√© et sign√©", "Justificatifs de revenus des 3 derniers mois complets"]
    
    if statut in ["chomeur", "demandeur_emploi"]:
        pj_list.append("Attestation de situation P√¥le emploi actualis√©e")
    elif statut == "retraite":
        pj_list.append("Notification de pension de retraite")
    elif statut == "etudiant":
        pj_list.append("Certificat de scolarit√© en cours de validit√©")
    
    pj_list.extend(["Justificatif de domicile de moins de 3 mois", "Copie recto-verso de la pi√®ce d'identit√©"])
    lettre["pj"] = pj_list
    
    # Personalize checklist
    if isinstance(revenu, (int, float)) and isinstance(foyer, int):
        annual = float(revenu) * 12
        personalized["checklist"][0] = f"V√©rifier l'√©ligibilit√© : {revenu}‚Ç¨ √ó 12 = {annual:.0f}‚Ç¨/an pour {foyer} personne(s)"
    
    return personalized

def integrate_loyers_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into loyers mock response for personalization"""
    import copy
    
    # Deep copy to avoid modifying the original
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    loyer = user_fields.get("loyer_actuel", "[Montant du loyer]")
    surface = user_fields.get("surface", "[Surface]")
    ville = user_fields.get("ville", "[Ville]")
    adresse = user_fields.get("adresse", "[Adresse du logement]")
    type_logement = user_fields.get("type", "logement")
    
    # Calculate potential excess (simplified estimate for demonstration)
    excess_text = "[Calcul du d√©passement]"
    if isinstance(loyer, (int, float, str)) and isinstance(surface, (int, float, str)):
        try:
            loyer_val = float(loyer)
            surface_val = float(surface)
            prix_m2 = loyer_val / surface_val
            if prix_m2 > 25:  # Simplified threshold for Paris
                excess = loyer_val - (25 * surface_val)
                excess_text = f"D√©passement estim√© de {excess:.0f}‚Ç¨/mois ({prix_m2:.2f}‚Ç¨/m¬≤ vs r√©f√©rence ~25‚Ç¨/m¬≤)"
        except:
            pass
    
    # Personalize resume
    personalized["resume"][0] = f"V√©rifier l'encadrement des loyers applicable √† {ville} pour un {type_logement} de {surface}m¬≤"
    personalized["resume"][1] = f"Calculer le d√©passement du loyer de r√©f√©rence pour le logement sis {adresse} (loyer actuel: {loyer}‚Ç¨)"
    
    # Personalize letter
    lettre = personalized["lettre"]
    lettre["objet"] = f"Contestation du montant du loyer - Logement sis {adresse}, {ville}"
    
    lettre["corps"] = f"""Monsieur/Madame le Bailleur,

J'ai l'honneur de porter √† votre connaissance ma contestation formelle concernant le montant du loyer pratiqu√© pour le logement que j'occupe sis {adresse}, {ville}.

Apr√®s v√©rification aupr√®s des services comp√©tents, il appara√Æt que le loyer mensuel de {loyer}‚Ç¨ pour un {type_logement} de {surface}m¬≤ d√©passe manifestement les plafonds l√©gaux en vigueur dans cette zone.

{excess_text}

Conform√©ment aux dispositions de la loi ELAN et du d√©cret d'application relatif √† l'encadrement des loyers, je vous demande de bien vouloir proc√©der √† la r√©gularisation de cette situation en ramenant le loyer au montant l√©galement autoris√©.

Je vous prie d'agr√©er, Monsieur/Madame le Bailleur, l'expression de ma consid√©ration distingu√©e."""
    
    # Update pieces jointes
    lettre["pj"] = [
        f"Bail de location du logement sis {adresse}",
        "Quittances de loyer des 12 derniers mois",
        f"Donn√©es de r√©f√©rence des loyers √† {ville}",
        "Justificatif d'identit√© en cours de validit√©"
    ]
    
    # Personalize checklist
    personalized["checklist"][0] = f"Consulter les loyers de r√©f√©rence en mairie de {ville} ou sur le site officiel"
    personalized["checklist"][1] = f"Calculer pr√©cis√©ment le d√©passement pour un {type_logement} de {surface}m¬≤ √† {loyer}‚Ç¨/mois"
    
    return personalized

def integrate_amendes_data(response: Dict[str, Any], user_fields: dict) -> Dict[str, Any]:
    """Integrate user data into amendes mock response for personalization"""
    import copy
    from datetime import datetime, timedelta
    
    # Deep copy to avoid modifying the original
    personalized = copy.deepcopy(response)
    
    # Extract user data with fallbacks
    numero = user_fields.get("numero_amende", "[Num√©ro PV]")
    motif = user_fields.get("motif", "[Motif de la contravention]")
    lieu = user_fields.get("lieu", "[Lieu de l'infraction]")
    date_pv = user_fields.get("date", "[Date]")
    heure = user_fields.get("heure", "[Heure]")
    
    # Calculate 45-day deadline if date is provided
    deadline_text = "[45 jours apr√®s r√©ception]"
    if date_pv and "/" in str(date_pv):
        try:
            # Assume format DD/MM/YYYY and calculate 45 days later
            day, month, year = map(int, str(date_pv).split("/"))
            pv_date = datetime(year, month, day)
            deadline = pv_date + timedelta(days=45)
            deadline_text = deadline.strftime("%d/%m/%Y")
        except:
            pass  # Keep fallback if parsing fails
    
    # Personalize resume
    if "num√©ro" in str(personalized["resume"][0]).lower():
        personalized["resume"][0] = f"Analyser minutieusement les mentions du proc√®s-verbal n¬∞ {numero} dans un d√©lai de 5 jours"
    
    if len(personalized["resume"]) > 3:
        personalized["resume"][3] = f"Exp√©dier le courrier en LRAR avant l'√©ch√©ance du {deadline_text} (45e jour apr√®s r√©ception)"
    
    # Personalize letter
    lettre = personalized["lettre"]
    
    # Update object with specific data
    lettre["objet"] = f"Contestation formelle du proc√®s-verbal n¬∞ {numero} - {motif.title()} du {date_pv} - Art. L121-3 du Code de la route"
    
    # Update letter body with personalized data
    lettre["corps"] = f"""Monsieur l'Officier du Minist√®re Public,

J'ai l'honneur de porter √† votre connaissance ma contestation formelle du proc√®s-verbal n¬∞ {numero} dress√© le {date_pv} √† {heure} pour {motif} sur la voie publique sise {lieu}.

Apr√®s examen attentif des circonstances de fait et de droit, je conteste cette verbalisation pour les motifs juridiques suivants :

[Expos√© d√©taill√© et argument√© des moyens de contestation selon les preuves disponibles]

En cons√©quence, et conform√©ment aux dispositions de l'article 530 du Code de proc√©dure p√©nale, je sollicite respectueusement l'annulation pure et simple de cette contravention.

Dans l'attente de votre d√©cision motiv√©e, je vous prie d'agr√©er, Monsieur l'Officier du Minist√®re Public, l'expression de ma haute consid√©ration."""
    
    # Update pieces jointes with specific PV number
    lettre["pj"][0] = f"Copie int√©grale du proc√®s-verbal n¬∞ {numero}"
    if lieu != "[Lieu de l'infraction]":
        lettre["pj"][1] = f"Photographies horodat√©es du lieu {lieu}"
    
    # Personalize checklist
    if deadline_text != "[45 jours apr√®s r√©ception]":
        personalized["checklist"][0] = f"Respecter imp√©rativement le d√©lai l√©gal de 45 jours (√©ch√©ance : {deadline_text})"
    
    if lieu != "[Lieu de l'infraction]":
        personalized["checklist"][1] = f"Photographier le lieu {lieu} avec horodatage pour constitution de preuves"
    
    if numero != "[Num√©ro PV]":
        personalized["checklist"][3] = f"V√©rifier l'exactitude des mentions du PV n¬∞ {numero} (heure, lieu, motif)"
    
    return personalized

def get_mock_response(tool_id: str, user_fields: dict = None) -> Dict[str, Any]:
    """Enhanced fallback mock response with user data integration when OpenAI is unavailable"""
    
    # Tool-specific mock responses that follow the new standards
    mock_responses = {
        "amendes": {
            "resume": [
                "Analyser minutieusement les mentions du proc√®s-verbal dans un d√©lai de 5 jours (art. L121-3 Code de la route)",
                "Rassembler m√©thodiquement les preuves mat√©rielles et testimoniales de l'erreur de verbalisation",
                "R√©diger une contestation juridiquement argument√©e selon les dispositions du Code de proc√©dure p√©nale",
                "Exp√©dier le courrier en lettre recommand√©e avec accus√© de r√©ception avant l'expiration du d√©lai de 45 jours",
                "Constituer un dossier de suivi avec copies int√©grales et accus√©s de r√©ception pour tra√ßabilit√©",
                "Surveiller activement la r√©ponse de l'Officier du Minist√®re Public dans un d√©lai maximal de 3 mois",
                "Pr√©parer les √©ventuels recours compl√©mentaires en cas de rejet non motiv√© de la contestation"
            ],
            "lettre": {
                "destinataire_bloc": "Monsieur l'Officier du Minist√®re Public\nTribunal de Police de [Ville]\nService des Contraventions\n[Code postal] [Ville]",
                "objet": "Contestation formelle du proc√®s-verbal n¬∞ [Num√©ro] - Art. L121-3 du Code de la route",
                "corps": "Monsieur l'Officier du Minist√®re Public,\n\nJ'ai l'honneur de porter √† votre connaissance ma contestation formelle du proc√®s-verbal n¬∞ [Num√©ro] dress√© le [Date] √† [Heure] pour [Motif] sur la voie publique sise [Lieu exact].\n\nApr√®s examen attentif des circonstances de fait et de droit, je conteste cette verbalisation pour les motifs juridiques suivants :\n\n[Expos√© d√©taill√© et argument√© des moyens de contestation]\n\nEn cons√©quence, et conform√©ment aux dispositions l√©gales en vigueur, je sollicite respectueusement l'annulation pure et simple de cette contravention.\n\nDans l'attente de votre d√©cision motiv√©e, je vous prie d'agr√©er, Monsieur l'Officier du Minist√®re Public, l'expression de ma haute consid√©ration.",
                "pj": ["Copie int√©grale du proc√®s-verbal contest√©", "Photographies horodat√©es des lieux", "Attestations circonstanci√©es de t√©moins", "Justificatif d'identit√© en cours de validit√©"],
                "signature": "[Pr√©nom NOM]\n[Adresse compl√®te avec code postal]\nT√©l. : [Num√©ro de t√©l√©phone]\nFait √† [Ville], le [Date]"
            },
            "checklist": [
                "Respecter imp√©rativement le d√©lai l√©gal de 45 jours √† compter de la r√©ception de l'avis (art. L121-3 Code de la route)",
                "Photographier exhaustivement les lieux avec horodatage pour constitution de preuves",
                "Recueillir des t√©moignages √©crits et sign√©s de personnes pr√©sentes lors des faits all√©gu√©s",
                "V√©rifier scrupuleusement l'exactitude des mentions obligatoires du proc√®s-verbal",
                "Conserver pr√©cieusement l'original de l'avis de contravention et tous les accus√©s de r√©ception",
                "Calculer pr√©cis√©ment les d√©lais de prescription et de recours pour anticiper les √©ch√©ances"
            ],
            "mentions": "Aide juridique automatis√©e ‚Äì ne se substitue aucunement aux conseils personnalis√©s d'un avocat sp√©cialis√©. Respecter imp√©rativement le d√©lai de contestation de 45 jours. En cas de complexit√© particuli√®re, solliciter l'assistance d'un professionnel du droit. Possibilit√© de recours devant le tribunal comp√©tent en cas de rejet non motiv√©."
        },
        "travail": {
            "resume": [
                "Rassembler les preuves des heures suppl√©mentaires",
                "Calculer le montant exact des sommes dues",
                "Adresser une mise en demeure √† l'employeur",
                "Saisir le conseil de prud'hommes si √©chec",
                "Conserver toutes les pi√®ces justificatives"
            ],
            "lettre": {
                "destinataire_bloc": "Service Ressources Humaines\n[Adresse de l'entreprise]",
                "objet": "Demande de paiement - Heures suppl√©mentaires",
                "corps": "Monsieur le Directeur,\n\nJe vous informe que des heures suppl√©mentaires effectu√©es n'ont pas √©t√© r√©mun√©r√©es conform√©ment au Code du travail.\n\n[D√©tail des heures et calcul]\n\nJe vous demande le r√®glement sous 30 jours.",
                "pj": ["Planning de travail", "Relev√©s d'heures", "Contrat de travail", "Convention collective"],
                "signature": "[Nom Pr√©nom]\n[Adresse]\nLe [Date]"
            },
            "checklist": [
                "Rassembler tous les justificatifs d'heures",
                "V√©rifier les taux major√©s applicables",
                "Envoyer la demande en LRAR",
                "Respecter le d√©lai de prescription de 3 ans"
            ],
            "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil d'avocat. Respecter les d√©lais de prescription et de saisine prud'homale."
        },
        "loyers": {
            "resume": [
                "Analyser l'applicabilit√© de l'encadrement des loyers dans la zone g√©ographique concern√©e",
                "Consulter les donn√©es officielles de loyers de r√©f√©rence aupr√®s des services municipaux comp√©tents",
                "Calculer m√©thodiquement l'√©ventuel d√©passement par rapport au loyer de r√©f√©rence l√©gal",
                "Constituer un dossier documentaire exhaustif avec toutes les pi√®ces justificatives",
                "Adresser une mise en demeure formelle au bailleur en lettre recommand√©e avec AR",
                "Saisir la commission d√©partementale de conciliation en cas d'√©chec de la n√©gociation amiable",
                "Engager une action devant le tribunal judiciaire si la situation n'est pas r√©gularis√©e"
            ],
            "lettre": {
                "destinataire_bloc": "Monsieur/Madame [Nom du bailleur]\n[Qualit√© : Propri√©taire bailleur]\n[Adresse compl√®te du bailleur]\n[Code postal] [Ville]",
                "objet": "Contestation formelle du montant du loyer - Logement sis [Adresse] - Encadrement des loyers",
                "corps": "Monsieur/Madame le Bailleur,\n\nJ'ai l'honneur de porter √† votre connaissance ma contestation formelle concernant le montant du loyer pratiqu√© pour le logement que j'occupe.\n\nApr√®s v√©rification aupr√®s des services comp√©tents, il appara√Æt que le loyer mensuel d√©passe manifestement les plafonds l√©gaux en vigueur.\n\n[Expos√© d√©taill√© du calcul et du d√©passement constat√©]\n\nConform√©ment aux dispositions l√©gales en vigueur, je vous demande de proc√©der √† la r√©gularisation de cette situation.\n\nJe vous prie d'agr√©er, Monsieur/Madame le Bailleur, l'expression de ma consid√©ration distingu√©e.",
                "pj": ["Bail de location original", "Quittances de loyer des 12 derniers mois", "Donn√©es officielles des loyers de r√©f√©rence", "Justificatif d'identit√© en cours de validit√©"],
                "signature": "[Pr√©nom NOM]\nLocataire\n[Adresse compl√®te]\nT√©l√©phone : [Num√©ro]\nFait √† [Ville], le [Date]"
            },
            "checklist": [
                "V√©rifier l'applicabilit√© de l'encadrement des loyers dans votre commune et arrondissement",
                "Consulter les donn√©es officielles des loyers de r√©f√©rence sur le site de la pr√©fecture",
                "Calculer pr√©cis√©ment le d√©passement en fonction de la surface et des caract√©ristiques du logement",
                "Rassembler toutes les pi√®ces justificatives n√©cessaires √† la constitution du dossier",
                "Envoyer la mise en demeure en lettre recommand√©e avec accus√© de r√©ception",
                "Respecter les d√©lais de prescription triennale pour les actions en r√©cup√©ration de loyers",
                "Conserver pr√©cieusement tous les documents et accus√©s de r√©ception"
            ],
            "mentions": "Aide juridique automatis√©e ‚Äì ne se substitue pas aux conseils d'un avocat sp√©cialis√© en droit immobilier. V√©rifier imp√©rativement l'applicabilit√© de l'encadrement des loyers dans votre commune. Possibilit√© de recours devant la commission de conciliation puis devant le tribunal judiciaire. D√©lai de prescription : 3 ans pour les actions en restitution de loyers ind√ªment per√ßus."
        },
        "css": {
            "resume": [
                "Bonne nouvelle : v√©rifier votre √©ligibilit√© CSS selon vos revenus - vous pourriez √™tre surpris(e) des √©conomies possibles !",
                "Rassembler tranquillement vos justificatifs - on vous guide pour ne rien oublier",
                "Remplir le formulaire S3715 sans stress - il est plus simple qu'il n'y para√Æt",
                "D√©poser votre dossier √† la CPAM - ils sont l√† pour vous aider, n'h√©sitez pas √† demander conseil",
                "Suivre sereinement le traitement (2 mois maximum) - la CPAM a l'obligation de vous r√©pondre",
                "D√®s l'accord, votre CSS fonctionne imm√©diatement - fini les frais m√©dicaux qui plombent le budget !",
                "Programmer le renouvellement dans un an - un simple rappel et vous √™tes tranquille",
                "Profiter de votre protection sant√© - vous l'avez m√©rit√© et c'est votre droit !"
            ],
            "lettre": {
                "destinataire_bloc": "Caisse Primaire d'Assurance Maladie\nService Compl√©mentaire Sant√© Solidaire\n[Adresse CPAM de votre d√©partement]\n[Code postal] [Ville]",
                "objet": "Demande de Compl√©mentaire Sant√© Solidaire - Situation [situation sp√©cifique]",
                "corps": "Madame, Monsieur,\n\nJ'ai l'honneur de solliciter l'attribution de la Compl√©mentaire Sant√© Solidaire pour mon foyer.\n\nMa situation actuelle me permet de pr√©tendre √† cette aide pr√©cieuse qui m'assurerait un acc√®s aux soins sans frais suppl√©mentaires.\n\n[Ici sera int√©gr√©e votre situation personnelle selon vos donn√©es]\n\nCette demande s'inscrit dans le cadre de la solidarit√© nationale pour l'acc√®s aux soins, et j'esp√®re que mon dossier recevra un accueil favorable.\n\nVous trouverez ci-joint l'ensemble des pi√®ces justificatives requises. Je me tiens √† votre disposition pour tout compl√©ment d'information.\n\nJe vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations respectueuses.",
                "pj": ["Formulaire S3715 d√ªment compl√©t√© et sign√©", "Justificatifs de revenus des 3 derniers mois", "Justificatif de domicile r√©cent", "Copie de pi√®ce d'identit√©", "Attestation de situation (si applicable)", "RIB pour les remboursements"],
                "signature": "[Votre pr√©nom et NOM]\n[Votre adresse compl√®te]\n[Code postal et ville]\nN¬∞ S√©curit√© Sociale : [Votre num√©ro]\nT√©l√©phone : [Votre num√©ro]\nFait √† [Votre ville], le [Date du jour]"
            },
            "checklist": [
                "‚úÖ Calculer votre √©ligibilit√© pr√©cise selon vos revenus annuels - utilisez le simulateur ameli.fr si besoin",
                "üìã R√©cup√©rer le formulaire S3715 sur ameli.fr ou dans votre agence CPAM (accueil toujours disponible)",
                "üíº Rassembler vos justificatifs de revenus r√©cents - m√™me modestes, ils prouvent vos droits",
                "üè† Joindre un justificatif de domicile r√©cent - facture, quittance, ou attestation d'h√©bergement",
                "üìÆ D√©poser rapidement votre dossier complet - plus vite c'est fait, plus vite vous √™tes prot√©g√©(e)",
                "üìÅ Conserver pr√©cieusement vos copies et l'accus√© de r√©ception - c'est votre s√©curit√©",
                "‚è∞ Noter le d√©lai de 2 mois pour la r√©ponse - et n'h√©sitez pas √† relancer si besoin",
                "üîÑ Pr√©voir le renouvellement annuel √† l'avance - un courrier vous le rappellera"
            ],
            "mentions": "ü§ñ Cette aide automatis√©e √©value vos droits selon la l√©gislation en vigueur. üí∞ La CSS peut vous faire √©conomiser des centaines d'euros par an en frais de sant√©. ‚öñÔ∏è En cas de refus, vous avez 2 mois pour faire un recours aupr√®s de la CRA. üè• Avec la CSS, tous vos soins courants sont pris en charge sans avance de frais. üí™ N'h√©sitez pas √† faire valoir vos droits - c'est fait pour vous aider ! üìû Votre CPAM peut vous renseigner : ils sont l√† pour √ßa."
        }
    }
    
    # Return tool-specific mock with user data integration or generic fallback
    if tool_id in mock_responses:
        response = mock_responses[tool_id].copy()
        
        # Integrate user data for specific tools
        if tool_id == "amendes" and user_fields:
            response = integrate_amendes_data(response, user_fields)
        elif tool_id == "loyers" and user_fields:
            response = integrate_loyers_data(response, user_fields)
        elif tool_id == "css" and user_fields:
            response = integrate_css_data(response, user_fields)
        
        # Apply quality enhancement to all responses
        response = enhance_response_quality(response, user_fields, tool_id)
        
        return response
    
    # Generic enhanced fallback for other tools
    generic_response = {
        "resume": [
            "Pas de panique : analyser calmement votre situation pour identifier vos droits et les d√©marches appropri√©es",
            "Prendre le temps de rassembler tous vos documents - m√™me si cela semble complexe, chaque pi√®ce a son importance",
            "R√©diger votre courrier en suivant nos conseils - vous avez toutes les cl√©s pour √™tre convaincant(e)",
            "Envoyer en lettre recommand√©e pour √™tre pris(e) au s√©rieux - c'est votre garantie l√©gale",
            "Suivre votre dossier sans stress - les administrations ont des d√©lais √† respecter",
            "Rester confiant(e) : en connaissant vos droits et en suivant la proc√©dure, vous maximisez vos chances de succ√®s",
            "Si besoin, ne pas h√©siter √† faire appel - vous avez des recours, utilisez-les !",
            "Garder toutes vos preuves pr√©cieusement - c'est votre meilleure protection"
        ],
        "lettre": {
            "destinataire_bloc": "Service comp√©tent\n[Nom pr√©cis du service concern√©]\n[Adresse compl√®te du service]\n[Code postal] [Ville]",
            "objet": f"Demande concernant {tool_id.replace('_', ' ').title()} - Dossier personnel",
            "corps": "Madame, Monsieur,\n\nJ'ai l'honneur de m'adresser √† vos services concernant ma situation qui n√©cessite votre expertise et votre intervention.\n\n[Ici, vous exposerez clairement votre situation en vous appuyant sur les faits et vos droits]\n\nJe suis convaincu(e) que ma demande est justifi√©e et j'esp√®re qu'elle recevra un accueil favorable de votre part.\n\nVous trouverez ci-joint les documents n√©cessaires √† l'examen de mon dossier. Je reste √† votre disposition pour tout compl√©ment d'information.\n\nDans l'attente de votre r√©ponse, je vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations respectueuses.",
            "pj": ["Documents justifiant votre situation", "Pi√®ce d'identit√© en cours de validit√©", "Justificatif de domicile r√©cent", "Tout document pertinent selon votre cas"],
            "signature": "[Votre pr√©nom et NOM]\n[Votre adresse compl√®te]\n[Code postal et ville]\nT√©l√©phone : [Votre num√©ro]\nEmail : [Votre email]\n\nFait √† [Votre ville], le [Date du jour]"
        },
        "checklist": [
            "üìã Faire une copie de tous vos documents avant envoi - c'est votre s√©curit√©",
            "‚è∞ Bien noter les d√©lais √† respecter et les programmer dans votre agenda",
            "üìé Rassembler toutes les pi√®ces demand√©es - m√™me si cela prend du temps, c'est essentiel",
            "üì¨ Envoyer en recommand√© avec accus√© de r√©ception - gardez pr√©cieusement ce papier",
            "üìÖ Noter la date limite de r√©ponse et programmer un rappel si n√©cessaire",
            "üí™ Rester patient(e) mais vigilant(e) - vous avez fait le n√©cessaire",
            "üîÑ En cas de probl√®me, ne pas h√©siter √† relancer ou faire appel - c'est votre droit",
            "üìû Si vous avez des doutes, contacter le service concern√© - ils sont l√† pour vous aider"
        ],
        "mentions": "ü§ñ Cette aide automatis√©e vous donne les bases pour bien d√©marrer vos d√©marches. üí™ Vous avez des droits, n'h√©sitez pas √† les faire valoir ! ‚öñÔ∏è En cas de doute, un avocat peut vous conseiller pour les situations complexes. üìû Les services publics ont l'obligation de vous renseigner - n'h√©sitez pas √† les contacter. üïí Respectez bien les d√©lais, mais ne vous mettez pas de pression inutile. üéØ Avec de la m√©thode et de la pers√©v√©rance, la plupart des d√©marches aboutissent positivement."
    }
    
    return enhance_response_quality(generic_response, user_fields, tool_id)

def validate_and_fix_response(response_data: Dict[str, Any], tool_id: str) -> Dict[str, Any]:
    """Validate response has required keys and fix if needed"""
    required_keys = ["resume", "lettre", "checklist", "mentions"]
    
    # Check if all required keys exist
    for key in required_keys:
        if key not in response_data:
            return get_mock_response(tool_id)
    
    # Check lettre structure
    if not isinstance(response_data.get("lettre"), dict):
        return get_mock_response(tool_id)
    
    lettre_keys = ["destinataire_bloc", "objet", "corps", "pj", "signature"]
    for key in lettre_keys:
        if key not in response_data["lettre"]:
            return get_mock_response(tool_id)
    
    # Ensure arrays are arrays
    if not isinstance(response_data.get("resume"), list):
        response_data["resume"] = ["√âtape 1 : Pr√©parez vos pi√®ces."]
    if not isinstance(response_data.get("checklist"), list):
        response_data["checklist"] = ["D√©lai indicatif 30‚Äì45 jours"]
    if not isinstance(response_data["lettre"].get("pj"), list):
        response_data["lettre"]["pj"] = ["Copie du document"]
    
    return response_data

def call_openai_with_retry(system_prompt: str, user_prompt: str, max_retries: int = 3, is_repair: bool = False) -> Dict[str, Any]:
    """Call OpenAI with exponential backoff retry logic"""
    if not openai_client:
        raise Exception("OpenAI client not available")
    
    # Use gpt-4o for main generation, gpt-4o-mini for repair
    model = "gpt-4o-mini" if is_repair else "gpt-4o"
    max_tokens = 1200
    timeout = 20  # 15-20s per pass as specified
    
    for attempt in range(max_retries):
        try:
            start_time = time.time()
            response = openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                response_format={"type": "json_object"},
                temperature=0.2,
                max_tokens=max_tokens,
                timeout=timeout
            )
            
            duration = time.time() - start_time
            logger.info(f"OpenAI call successful - model: {model}, duration: {duration:.2f}s, attempt: {attempt + 1}")
            
            content = response.choices[0].message.content
            try:
                return json.loads(content)
            except json.JSONDecodeError:
                if is_repair:
                    # If repair also fails, raise exception
                    raise Exception("Repair attempt failed - invalid JSON")
                
                # Try repair with explicit prompt
                logger.warning(f"JSON decode error, attempting repair")
                repair_prompt = f"R√©parez ce JSON en format valide avec les cl√©s resume[], lettre{{}}, checklist[], mentions: {content}"
                return call_openai_with_retry(
                    "Vous √™tes un r√©parateur de JSON. Retournez uniquement du JSON valide.",
                    repair_prompt,
                    max_retries=2,
                    is_repair=True
                )
                
        except openai.RateLimitError:
            # 429 - Rate limit
            if attempt < max_retries - 1:
                wait_time = (2 ** attempt) + (attempt * 0.1)  # Exponential backoff
                logger.warning(f"Rate limit hit, waiting {wait_time:.1f}s")
                time.sleep(wait_time)
                continue
            logger.error("Max retries exceeded due to rate limiting")
            raise
        except (openai.APITimeoutError, openai.InternalServerError, openai.APIError) as e:
            # Timeout, 5xx errors
            if attempt < max_retries - 1:
                wait_time = (2 ** attempt) + (attempt * 0.1)  # Exponential backoff
                logger.warning(f"API error: {type(e).__name__}, waiting {wait_time:.1f}s")
                time.sleep(wait_time)
                continue
            logger.error(f"Max retries exceeded due to API errors: {e}")
            raise
        except Exception as e:
            # Any other error
            logger.error(f"Unexpected error in OpenAI call: {e}")
            raise
    
    raise Exception("Max retries exceeded")

def generate_with_two_passes(system_prompt: str, user_prompt: str, tool_id: str) -> Dict[str, Any]:
    """Generate response with two-pass auto-critique system"""
    start_time = time.time()
    
    try:
        # Pass 1: Initial generation
        logger.info(f"Pass 1 - Initial generation for tool: {tool_id}")
        pass1_response = call_openai_with_retry(system_prompt, user_prompt)
        
        # Validate Pass 1 response structure
        validated_pass1 = validate_and_fix_response(pass1_response, tool_id)
        
        # Pass 2: Auto-critique and improvement
        logger.info(f"Pass 2 - Auto-critique for tool: {tool_id}")
        critique_prompt = f"""Voici le JSON g√©n√©r√© en premi√®re passe :

{json.dumps(validated_pass1, ensure_ascii=False, indent=2)}

CRITIQUE PROFESSIONNELLE REQUISE - Am√©liore la qualit√© et le professionnalisme :

1. PERSONNALISATION INTELLIGENTE : Int√®gre de mani√®re naturelle et empathique les donn√©es utilisateur dans tous les champs (dates, noms, montants, r√©f√©rences). √âvite absolument les formulations g√©n√©riques. Montre une compr√©hension profonde de la situation personnelle.

2. TONALIT√â HUMAINE ET PROFESSIONNELLE : √âquilibre parfaitement un langage juridique pr√©cis avec une approche bienveillante et accessible. Am√©liore les formules de politesse pour qu'elles soient chaleureuses mais respectueuses. Rend la structure argumentative claire et rassurante.

3. PR√âCISION JURIDIQUE ACCESSIBLE : Ajoute des r√©f√©rences l√©gales sp√©cifiques EXPLIQU√âES simplement, calcule les d√©lais exacts AVEC explications, mentionne les proc√©dures d√©taill√©es de mani√®re accessible et rassurante.

4. EXHAUSTIVIT√â ET ANTICIPATION : Assure-toi que la r√©ponse est SI compl√®te que l'utilisateur n'aura pas besoin de revenir :
   - resume contient 6-10 √©tapes d√©taill√©es avec estimations temporelles ET conseils pour g√©rer le stress
   - lettre int√®gre parfaitement les donn√©es fournies et utilise un vocabulaire professionnel mais accessible
   - checklist inclut des actions expertes avec d√©lais pr√©cis ET conseils pratiques rassurants
   - mentions contient 4-6 rappels juridiques bienveillants avec r√©f√©rences aux recours ET encouragements

5. EXCELLENCE RELATIONNELLE : Adopte le ton d'un conseiller expert ET bienveillant qui comprend l'anxi√©t√© juridique. √âvite les r√©p√©titions, utilise des synonymes, structure les paragraphes logiquement, et ajoute des √©l√©ments rassurants.

6. QUALIT√â CHATGPT : La r√©ponse doit avoir la qualit√© conversationnelle de ChatGPT tout en gardant la pr√©cision juridique. Anticipe les questions de suivi et les inqui√©tudes.

R√©ponds en JSON strict identique mais transform√© selon ces crit√®res d'excellence humaine et professionnelle."""

        pass2_response = call_openai_with_retry(system_prompt, critique_prompt)
        
        # Final validation
        final_response = validate_and_fix_response(pass2_response, tool_id)
        
        duration = time.time() - start_time
        logger.info(f"Two-pass generation completed - tool: {tool_id}, total duration: {duration:.2f}s")
        
        return final_response
        
    except Exception as e:
        duration = time.time() - start_time
        logger.error(f"Two-pass generation failed - tool: {tool_id}, duration: {duration:.2f}s, error: {e}")
        # Fallback to mock response after max attempts
        return get_mock_response(tool_id)

class GenIn(BaseModel):
    tool_id: str
    fields: dict

@app.get("/health")
def health(): return {"ok": True}

@app.post("/generate")
def generate(in_: GenIn):
    # Validate tool_id
    allowed = ["amendes","aides","loyers","travail","sante","caf","usure","energie","expulsions","css","ecole","decodeur"]
    if in_.tool_id not in allowed:
        raise HTTPException(400, "tool_id inconnu")
    
    # Try OpenAI integration with two-pass system, fallback to mock on any error
    if openai_client and in_.tool_id in TEMPLATES:
        try:
            # Build user prompt from template
            template = TEMPLATES[in_.tool_id]
            user_prompt = template.format(fields=json.dumps(in_.fields, ensure_ascii=False))
            
            # Enhanced system prompt with strict JSON requirements
            enhanced_system_prompt = f"""{SYSTEM_PROMPT}

Tu dois OBLIGATOIREMENT r√©pondre avec un JSON valide contenant exactement ces 4 cl√©s:
- "resume": array de 4-8 strings concr√®tes (√©tapes √† suivre)
- "lettre": objet avec les cl√©s "destinataire_bloc", "objet", "corps", "pj" (array), "signature"
- "checklist": array de strings (actions claires, verbes √† l'infinitif)
- "mentions": string (2-4 rappels prudents)

Exemple de structure attendue:
{{
  "resume": ["√âtape 1...", "√âtape 2...", "√âtape 3...", "√âtape 4..."],
  "lettre": {{
    "destinataire_bloc": "Service\\nAdresse\\nVille",
    "objet": "Objet du courrier",
    "corps": "Corps de la lettre en fran√ßais administratif...",
    "pj": ["Pi√®ce 1", "Pi√®ce 2"],
    "signature": "Signature avec nom, adresse, date"
  }},
  "checklist": ["V√©rifier...", "Conserver...", "Respecter le d√©lai de..."],
  "mentions": "Aide automatis√©e ‚Äì ne remplace pas un conseil d'avocat. D√©lais l√©gaux √† respecter."
}}"""
            
            # Use two-pass generation system
            return generate_with_two_passes(enhanced_system_prompt, user_prompt, in_.tool_id)
            
        except Exception as e:
            logger.error(f"Generation failed for tool {in_.tool_id}: {e}")
    
    # Fallback to mock response
    logger.info(f"Using mock response for tool: {in_.tool_id}")
    return get_mock_response(in_.tool_id, in_.fields)